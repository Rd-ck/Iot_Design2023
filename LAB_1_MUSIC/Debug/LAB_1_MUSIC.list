
LAB_1_MUSIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08004c18  08004c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df0  08004df0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004df8  08004df8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dfc  08004dfc  00014dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08004e70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004e70  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012112  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027de  00000000  00000000  000321b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00034990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00035958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002850e  00000000  00000000  000367f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013695  00000000  00000000  0005ed06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3aa6  00000000  00000000  0007239b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165e41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e0  00000000  00000000  00165e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c00 	.word	0x08004c00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004c00 	.word	0x08004c00

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e2:	4b44      	ldr	r3, [pc, #272]	; (80005f4 <MX_GPIO_Init+0x128>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a43      	ldr	r2, [pc, #268]	; (80005f4 <MX_GPIO_Init+0x128>)
 80004e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <MX_GPIO_Init+0x128>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <MX_GPIO_Init+0x128>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a3d      	ldr	r2, [pc, #244]	; (80005f4 <MX_GPIO_Init+0x128>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b3b      	ldr	r3, [pc, #236]	; (80005f4 <MX_GPIO_Init+0x128>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <MX_GPIO_Init+0x128>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a37      	ldr	r2, [pc, #220]	; (80005f4 <MX_GPIO_Init+0x128>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b35      	ldr	r3, [pc, #212]	; (80005f4 <MX_GPIO_Init+0x128>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b32      	ldr	r3, [pc, #200]	; (80005f4 <MX_GPIO_Init+0x128>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a31      	ldr	r2, [pc, #196]	; (80005f4 <MX_GPIO_Init+0x128>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <MX_GPIO_Init+0x128>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RED_Pin|Blue_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8000548:	482b      	ldr	r0, [pc, #172]	; (80005f8 <MX_GPIO_Init+0x12c>)
 800054a:	f000 ff9b 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	4828      	ldr	r0, [pc, #160]	; (80005f8 <MX_GPIO_Init+0x12c>)
 8000556:	f000 ff95 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	4827      	ldr	r0, [pc, #156]	; (80005fc <MX_GPIO_Init+0x130>)
 8000560:	f000 ff90 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RED_Pin|Blue_Pin;
 8000564:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000572:	2302      	movs	r3, #2
 8000574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	481e      	ldr	r0, [pc, #120]	; (80005f8 <MX_GPIO_Init+0x12c>)
 800057e:	f000 fdbf 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2300      	movs	r3, #0
 8000592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	4817      	ldr	r0, [pc, #92]	; (80005f8 <MX_GPIO_Init+0x12c>)
 800059c:	f000 fdb0 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f000 fda1 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <MX_GPIO_Init+0x130>)
 80005d6:	f000 fd93 	bl	8001100 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2104      	movs	r1, #4
 80005de:	2028      	movs	r0, #40	; 0x28
 80005e0:	f000 fd57 	bl	8001092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005e4:	2028      	movs	r0, #40	; 0x28
 80005e6:	f000 fd70 	bl	80010ca <HAL_NVIC_EnableIRQ>

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	48000800 	.word	0x48000800
 80005fc:	48000400 	.word	0x48000400

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fbd1 	bl	8000daa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f822 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f7ff ff5e 	bl	80004cc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000610:	f000 faa6 	bl	8000b60 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000614:	f000 fb14 	bl	8000c40 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <main+0x3c>)
 800061e:	f000 ff49 	bl	80014b4 <HAL_GPIO_TogglePin>
	  if(flag){
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <main+0x40>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d004      	beq.n	8000634 <main+0x34>
		  music_import(music1, time1);
 800062a:	4906      	ldr	r1, [pc, #24]	; (8000644 <main+0x44>)
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <main+0x48>)
 800062e:	f000 f8cd 	bl	80007cc <music_import>
 8000632:	e7f1      	b.n	8000618 <main+0x18>
	  }
	  else printf("qiu lao shi zui shuai!\r\n");
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <main+0x4c>)
 8000636:	f003 fe53 	bl	80042e0 <puts>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800063a:	e7ed      	b.n	8000618 <main+0x18>
 800063c:	48000800 	.word	0x48000800
 8000640:	2000008c 	.word	0x2000008c
 8000644:	08004cc8 	.word	0x08004cc8
 8000648:	08004c4c 	.word	0x08004c4c
 800064c:	08004c18 	.word	0x08004c18

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	; 0x58
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2244      	movs	r2, #68	; 0x44
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fdc8 	bl	80041f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000676:	f000 ff5d 	bl	8001534 <HAL_PWREx_ControlVoltageScaling>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000680:	f000 f886 	bl	8000790 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	2303      	movs	r3, #3
 8000694:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800069a:	2314      	movs	r3, #20
 800069c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800069e:	2307      	movs	r3, #7
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ff96 	bl	80015e0 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ba:	f000 f869 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2303      	movs	r3, #3
 80006c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	2104      	movs	r1, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fb5e 	bl	8001d98 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f855 	bl	8000790 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3758      	adds	r7, #88	; 0x58
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11){
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000700:	d13c      	bne.n	800077c <HAL_GPIO_EXTI_Callback+0x8c>

	  HAL_Delay(20);
 8000702:	2014      	movs	r0, #20
 8000704:	f000 fbc6 	bl	8000e94 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==1){
 8000708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000710:	f000 fea0 	bl	8001454 <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	2b01      	cmp	r3, #1
 8000718:	d130      	bne.n	800077c <HAL_GPIO_EXTI_Callback+0x8c>
		  flag=!flag;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <HAL_GPIO_EXTI_Callback+0x94>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	bf0c      	ite	eq
 8000722:	2301      	moveq	r3, #1
 8000724:	2300      	movne	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_GPIO_EXTI_Callback+0x94>)
 800072c:	701a      	strb	r2, [r3, #0]
		  if(flag){
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_GPIO_EXTI_Callback+0x94>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d006      	beq.n	8000744 <HAL_GPIO_EXTI_Callback+0x54>
			  HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073c:	4812      	ldr	r0, [pc, #72]	; (8000788 <HAL_GPIO_EXTI_Callback+0x98>)
 800073e:	f000 fea1 	bl	8001484 <HAL_GPIO_WritePin>
		  }

	  }
  }

}
 8000742:	e01b      	b.n	800077c <HAL_GPIO_EXTI_Callback+0x8c>
			  BEEPL();
 8000744:	f000 f836 	bl	80007b4 <BEEPL>
			  HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, 1);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074e:	480e      	ldr	r0, [pc, #56]	; (8000788 <HAL_GPIO_EXTI_Callback+0x98>)
 8000750:	f000 fe98 	bl	8001484 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Stop(&htim2);
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000756:	f002 fa56 	bl	8002c06 <HAL_TIM_Base_Stop>
			  HAL_Delay(500);
 800075a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800075e:	f000 fb99 	bl	8000e94 <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==0){
 8000762:	e002      	b.n	800076a <HAL_GPIO_EXTI_Callback+0x7a>
				  HAL_Delay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f000 fb95 	bl	8000e94 <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==0){
 800076a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f000 fe6f 	bl	8001454 <HAL_GPIO_ReadPin>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f3      	beq.n	8000764 <HAL_GPIO_EXTI_Callback+0x74>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000008c 	.word	0x2000008c
 8000788:	48000800 	.word	0x48000800
 800078c:	20000094 	.word	0x20000094

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <BEEPH>:
        4, 2,2,2, 4, 2,2,2, 2,2,8,
        4, 2,2,2,4,2,2,2,2,2,8,
        4, 2,2,2,4,2,2,5,2,6,2,4,
        2,2 ,2,4,2,4,2,2,12
};
void BEEPH(void){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <BEEPH+0x14>)
 80007a6:	f000 fe6d 	bl	8001484 <HAL_GPIO_WritePin>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	48000400 	.word	0x48000400

080007b4 <BEEPL>:

void BEEPL(void){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <BEEPL+0x14>)
 80007be:	f000 fe61 	bl	8001484 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	48000400 	.word	0x48000400

080007cc <music_import>:


void music_import(const uint8_t* music,const uint8_t* time){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	for(uint16_t i=0;i<(sizeof(*music)/sizeof(music[0]));i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	81fb      	strh	r3, [r7, #14]
 80007da:	e031      	b.n	8000840 <music_import+0x74>
		for(uint16_t j=0;j<((uint16_t)time[i]*tone[music[i]]);j++)
 80007dc:	2300      	movs	r3, #0
 80007de:	81bb      	strh	r3, [r7, #12]
 80007e0:	e019      	b.n	8000816 <music_import+0x4a>
		{
			BEEPH();
 80007e2:	f7ff ffdb 	bl	800079c <BEEPH>
			uint32_t us=500000/tone[music[i]];
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <music_import+0x84>)
 80007f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <music_import+0x88>)
 80007fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
			Delay_us(us);
 8000800:	68b8      	ldr	r0, [r7, #8]
 8000802:	f000 f845 	bl	8000890 <Delay_us>
			BEEPL();
 8000806:	f7ff ffd5 	bl	80007b4 <BEEPL>
			Delay_us(us);
 800080a:	68b8      	ldr	r0, [r7, #8]
 800080c:	f000 f840 	bl	8000890 <Delay_us>
		for(uint16_t j=0;j<((uint16_t)time[i]*tone[music[i]]);j++)
 8000810:	89bb      	ldrh	r3, [r7, #12]
 8000812:	3301      	adds	r3, #1
 8000814:	81bb      	strh	r3, [r7, #12]
 8000816:	89ba      	ldrh	r2, [r7, #12]
 8000818:	89fb      	ldrh	r3, [r7, #14]
 800081a:	6839      	ldr	r1, [r7, #0]
 800081c:	440b      	add	r3, r1
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	89fb      	ldrh	r3, [r7, #14]
 8000824:	6879      	ldr	r1, [r7, #4]
 8000826:	440b      	add	r3, r1
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4619      	mov	r1, r3
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <music_import+0x84>)
 800082e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000832:	fb00 f303 	mul.w	r3, r0, r3
 8000836:	429a      	cmp	r2, r3
 8000838:	dbd3      	blt.n	80007e2 <music_import+0x16>
	for(uint16_t i=0;i<(sizeof(*music)/sizeof(music[0]));i++)
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	3301      	adds	r3, #1
 800083e:	81fb      	strh	r3, [r7, #14]
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0ca      	beq.n	80007dc <music_import+0x10>
		}
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	08004c30 	.word	0x08004c30
 8000854:	0007a120 	.word	0x0007a120

08000858 <setState>:
typedef enum {FALSE = 0,TRUE = 1} bool;

volatile bool elapsed = FALSE; //用于判断设置的计数值是否耗尽（向下计数模式），耗尽时，在中断中奖会设置为true

void setState(bool state)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
    elapsed = state;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <setState+0x1c>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	7013      	strb	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	2000008d 	.word	0x2000008d

08000878 <getState>:

bool getState()
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
    return elapsed;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <getState+0x14>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	2000008d 	.word	0x2000008d

08000890 <Delay_us>:

void Delay_us(uint32_t time)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

    __HAL_TIM_SetCounter(&htim2,time); //设置计数值
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <Delay_us+0x38>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
    setState(FALSE);
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff ffd9 	bl	8000858 <setState>
    HAL_TIM_Base_Start_IT(&htim2); //开启定时器
 80008a6:	4808      	ldr	r0, [pc, #32]	; (80008c8 <Delay_us+0x38>)
 80008a8:	f002 f9d4 	bl	8002c54 <HAL_TIM_Base_Start_IT>
    while(!getState()); //判断计数值是否耗尽
 80008ac:	bf00      	nop
 80008ae:	f7ff ffe3 	bl	8000878 <getState>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0fa      	beq.n	80008ae <Delay_us+0x1e>
    HAL_TIM_Base_Stop_IT(&htim2); //关闭定时器
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <Delay_us+0x38>)
 80008ba:	f002 fa3b 	bl	8002d34 <HAL_TIM_Base_Stop_IT>

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000094 	.word	0x20000094

080008cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008dc:	d102      	bne.n	80008e4 <HAL_TIM_PeriodElapsedCallback+0x18>
		setState(TRUE);
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff ffba 	bl	8000858 <setState>
	}

}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <__io_putchar>:
#include "printf.h"

PUTCHAR_PROTOTYPE
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80008f4:	1d39      	adds	r1, r7, #4
 80008f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fa:	2201      	movs	r2, #1
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <__io_putchar+0x20>)
 80008fe:	f002 fe81 	bl	8003604 <HAL_UART_Transmit>

    return ch;
 8000902:	687b      	ldr	r3, [r7, #4]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000e0 	.word	0x200000e0

08000910 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  int ch;

  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000916:	1d39      	adds	r1, r7, #4
 8000918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800091c:	2201      	movs	r2, #1
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <__io_getchar+0x20>)
 8000920:	f002 ff04 	bl	800372c <HAL_UART_Receive>
  return ch;
 8000924:	687b      	ldr	r3, [r7, #4]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000e0 	.word	0x200000e0

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_MspInit+0x44>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6613      	str	r3, [r2, #96]	; 0x60
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x44>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6593      	str	r3, [r2, #88]	; 0x58
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 fa44 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <TIM2_IRQHandler+0x10>)
 80009d6:	f002 f9dc 	bl	8002d92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000094 	.word	0x20000094

080009e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80009e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80009ec:	f000 fd7c 	bl	80014e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	e00a      	b.n	8000a1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a06:	f7ff ff83 	bl	8000910 <__io_getchar>
 8000a0a:	4601      	mov	r1, r0
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	b2ca      	uxtb	r2, r1
 8000a14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf0      	blt.n	8000a06 <_read+0x12>
  }

  return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	e009      	b.n	8000a54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff4f 	bl	80008ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf1      	blt.n	8000a40 <_write+0x12>
  }
  return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_close>:

int _close(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <_isatty>:

int _isatty(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f003 fb4e 	bl	80041a0 <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20018000 	.word	0x20018000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	20000090 	.word	0x20000090
 8000b38:	20000178 	.word	0x20000178

08000b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_TIM2_Init+0x94>)
 8000b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_TIM2_Init+0x94>)
 8000b88:	224f      	movs	r2, #79	; 0x4f
 8000b8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_TIM2_Init+0x94>)
 8000b8e:	2210      	movs	r2, #16
 8000b90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_TIM2_Init+0x94>)
 8000b94:	2202      	movs	r2, #2
 8000b96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_TIM2_Init+0x94>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_TIM2_Init+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ba4:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <MX_TIM2_Init+0x94>)
 8000ba6:	f001 ffd7 	bl	8002b58 <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bb0:	f7ff fdee 	bl	8000790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <MX_TIM2_Init+0x94>)
 8000bc2:	f002 fa05 	bl	8002fd0 <HAL_TIM_ConfigClockSource>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f7ff fde0 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_TIM2_Init+0x94>)
 8000bde:	f002 fc1d 	bl	800341c <HAL_TIMEx_MasterConfigSynchronization>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000be8:	f7ff fdd2 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000094 	.word	0x20000094

08000bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c08:	d113      	bne.n	8000c32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_TIM_Base_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <HAL_TIM_Base_MspInit+0x44>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6593      	str	r3, [r2, #88]	; 0x58
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_TIM_Base_MspInit+0x44>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	201c      	movs	r0, #28
 8000c28:	f000 fa33 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c2c:	201c      	movs	r0, #28
 8000c2e:	f000 fa4c 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <MX_USART2_UART_Init+0x5c>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c84:	f002 fc70 	bl	8003568 <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f7ff fd7f 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000e0 	.word	0x200000e0
 8000c9c:	40004400 	.word	0x40004400

08000ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0ac      	sub	sp, #176	; 0xb0
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2288      	movs	r2, #136	; 0x88
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 fa97 	bl	80041f4 <memset>
  if(uartHandle->Instance==USART2)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <HAL_UART_MspInit+0xb0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d13b      	bne.n	8000d48 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fa7f 	bl	80021e0 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce8:	f7ff fd52 	bl	8000790 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_UART_MspInit+0xb4>)
 8000cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf0:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <HAL_UART_MspInit+0xb4>)
 8000cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_UART_MspInit+0xb4>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_UART_MspInit+0xb4>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <HAL_UART_MspInit+0xb4>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_UART_MspInit+0xb4>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d34:	2307      	movs	r3, #7
 8000d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f000 f9dc 	bl	8001100 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d48:	bf00      	nop
 8000d4a:	37b0      	adds	r7, #176	; 0xb0
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40004400 	.word	0x40004400
 8000d54:	40021000 	.word	0x40021000

08000d58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d5c:	f7ff feee 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d62:	490d      	ldr	r1, [pc, #52]	; (8000d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <LoopForever+0xe>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d78:	4c0a      	ldr	r4, [pc, #40]	; (8000da4 <LoopForever+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d86:	f003 fa11 	bl	80041ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d8a:	f7ff fc39 	bl	8000600 <main>

08000d8e <LoopForever>:

LoopForever:
    b LoopForever
 8000d8e:	e7fe      	b.n	8000d8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d9c:	08004e00 	.word	0x08004e00
  ldr r2, =_sbss
 8000da0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000da4:	20000178 	.word	0x20000178

08000da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_2_IRQHandler>

08000daa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f961 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f80e 	bl	8000ddc <HAL_InitTick>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	71fb      	strb	r3, [r7, #7]
 8000dca:	e001      	b.n	8000dd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dcc:	f7ff fdb2 	bl	8000934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_InitTick+0x6c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d023      	beq.n	8000e38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_InitTick+0x70>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_InitTick+0x6c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f96d 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10f      	bne.n	8000e32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d809      	bhi.n	8000e2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f000 f937 	bl	8001092 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_InitTick+0x74>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e007      	b.n	8000e3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	e004      	b.n	8000e3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	e001      	b.n	8000e3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000164 	.word	0x20000164

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000164 	.word	0x20000164

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffde 	bl	8000e7c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff29 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff3e 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff31 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa2 	bl	8001038 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e17f      	b.n	8001410 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8171 	beq.w	800140a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d005      	beq.n	8001140 <HAL_GPIO_Init+0x40>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d130      	bne.n	80011a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001176:	2201      	movs	r2, #1
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	f003 0201 	and.w	r2, r3, #1
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d118      	bne.n	80011e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	08db      	lsrs	r3, r3, #3
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d017      	beq.n	800121c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d123      	bne.n	8001270 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	6939      	ldr	r1, [r7, #16]
 800126c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0203 	and.w	r2, r3, #3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80ac 	beq.w	800140a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <HAL_GPIO_Init+0x330>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	4a5e      	ldr	r2, [pc, #376]	; (8001430 <HAL_GPIO_Init+0x330>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6613      	str	r3, [r2, #96]	; 0x60
 80012be:	4b5c      	ldr	r3, [pc, #368]	; (8001430 <HAL_GPIO_Init+0x330>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ca:	4a5a      	ldr	r2, [pc, #360]	; (8001434 <HAL_GPIO_Init+0x334>)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012f4:	d025      	beq.n	8001342 <HAL_GPIO_Init+0x242>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <HAL_GPIO_Init+0x338>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01f      	beq.n	800133e <HAL_GPIO_Init+0x23e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4e      	ldr	r2, [pc, #312]	; (800143c <HAL_GPIO_Init+0x33c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x23a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4d      	ldr	r2, [pc, #308]	; (8001440 <HAL_GPIO_Init+0x340>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x236>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4c      	ldr	r2, [pc, #304]	; (8001444 <HAL_GPIO_Init+0x344>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x232>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4b      	ldr	r2, [pc, #300]	; (8001448 <HAL_GPIO_Init+0x348>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x22e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4a      	ldr	r2, [pc, #296]	; (800144c <HAL_GPIO_Init+0x34c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x22a>
 8001326:	2306      	movs	r3, #6
 8001328:	e00c      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800132a:	2307      	movs	r3, #7
 800132c:	e00a      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800132e:	2305      	movs	r3, #5
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001332:	2304      	movs	r3, #4
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001342:	2300      	movs	r3, #0
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001354:	4937      	ldr	r1, [pc, #220]	; (8001434 <HAL_GPIO_Init+0x334>)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001362:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <HAL_GPIO_Init+0x350>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001386:	4a32      	ldr	r2, [pc, #200]	; (8001450 <HAL_GPIO_Init+0x350>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800138c:	4b30      	ldr	r3, [pc, #192]	; (8001450 <HAL_GPIO_Init+0x350>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013b0:	4a27      	ldr	r2, [pc, #156]	; (8001450 <HAL_GPIO_Init+0x350>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_GPIO_Init+0x350>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013da:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <HAL_GPIO_Init+0x350>)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_GPIO_Init+0x350>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <HAL_GPIO_Init+0x350>)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa22 f303 	lsr.w	r3, r2, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	f47f ae78 	bne.w	8001110 <HAL_GPIO_Init+0x10>
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000800 	.word	0x48000800
 8001440:	48000c00 	.word	0x48000c00
 8001444:	48001000 	.word	0x48001000
 8001448:	48001400 	.word	0x48001400
 800144c:	48001800 	.word	0x48001800
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e001      	b.n	8001476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4013      	ands	r3, r2
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43d9      	mvns	r1, r3
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	400b      	ands	r3, r1
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f8f2 	bl	80006f0 <HAL_GPIO_EXTI_Callback>
  }
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40010400 	.word	0x40010400

08001518 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <HAL_PWREx_GetVoltageRange+0x18>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40007000 	.word	0x40007000

08001534 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001542:	d130      	bne.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800154c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001550:	d038      	beq.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001560:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2232      	movs	r2, #50	; 0x32
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	0c9b      	lsrs	r3, r3, #18
 8001574:	3301      	adds	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001578:	e002      	b.n	8001580 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3b01      	subs	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158c:	d102      	bne.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x60>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f2      	bne.n	800157a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a0:	d110      	bne.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e00f      	b.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b2:	d007      	beq.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015bc:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40007000 	.word	0x40007000
 80015d8:	20000000 	.word	0x20000000
 80015dc:	431bde83 	.word	0x431bde83

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e3ca      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f2:	4b97      	ldr	r3, [pc, #604]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015fc:	4b94      	ldr	r3, [pc, #592]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80e4 	beq.w	80017dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_RCC_OscConfig+0x4a>
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	2b0c      	cmp	r3, #12
 800161e:	f040 808b 	bne.w	8001738 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2b01      	cmp	r3, #1
 8001626:	f040 8087 	bne.w	8001738 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800162a:	4b89      	ldr	r3, [pc, #548]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <HAL_RCC_OscConfig+0x62>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e3a2      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1a      	ldr	r2, [r3, #32]
 8001646:	4b82      	ldr	r3, [pc, #520]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <HAL_RCC_OscConfig+0x7c>
 8001652:	4b7f      	ldr	r3, [pc, #508]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800165a:	e005      	b.n	8001668 <HAL_RCC_OscConfig+0x88>
 800165c:	4b7c      	ldr	r3, [pc, #496]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800165e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001668:	4293      	cmp	r3, r2
 800166a:	d223      	bcs.n	80016b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fd55 	bl	8002120 <RCC_SetFlashLatencyFromMSIRange>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e383      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001680:	4b73      	ldr	r3, [pc, #460]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a72      	ldr	r2, [pc, #456]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b70      	ldr	r3, [pc, #448]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	496d      	ldr	r1, [pc, #436]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169e:	4b6c      	ldr	r3, [pc, #432]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	4968      	ldr	r1, [pc, #416]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
 80016b2:	e025      	b.n	8001700 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b4:	4b66      	ldr	r3, [pc, #408]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a65      	ldr	r2, [pc, #404]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b63      	ldr	r3, [pc, #396]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4960      	ldr	r1, [pc, #384]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d2:	4b5f      	ldr	r3, [pc, #380]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	495b      	ldr	r1, [pc, #364]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fd15 	bl	8002120 <RCC_SetFlashLatencyFromMSIRange>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e343      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001700:	f000 fc4a 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001704:	4602      	mov	r2, r0
 8001706:	4b52      	ldr	r3, [pc, #328]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	4950      	ldr	r1, [pc, #320]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001712:	5ccb      	ldrb	r3, [r1, r3]
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
 800171c:	4a4e      	ldr	r2, [pc, #312]	; (8001858 <HAL_RCC_OscConfig+0x278>)
 800171e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001720:	4b4e      	ldr	r3, [pc, #312]	; (800185c <HAL_RCC_OscConfig+0x27c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fb59 	bl	8000ddc <HAL_InitTick>
 800172a:	4603      	mov	r3, r0
 800172c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d052      	beq.n	80017da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	e327      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d032      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a42      	ldr	r2, [pc, #264]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800174c:	f7ff fb96 	bl	8000e7c <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001754:	f7ff fb92 	bl	8000e7c <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e310      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001766:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001772:	4b37      	ldr	r3, [pc, #220]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a36      	ldr	r2, [pc, #216]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4931      	ldr	r1, [pc, #196]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001790:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	492c      	ldr	r1, [pc, #176]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
 80017a4:	e01a      	b.n	80017dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a29      	ldr	r2, [pc, #164]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fb63 	bl	8000e7c <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ba:	f7ff fb5f 	bl	8000e7c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e2dd      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x1da>
 80017d8:	e000      	b.n	80017dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d074      	beq.n	80018d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x21a>
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d10e      	bne.n	8001812 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d10b      	bne.n	8001812 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d064      	beq.n	80018d0 <HAL_RCC_OscConfig+0x2f0>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d160      	bne.n	80018d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e2ba      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x24a>
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e026      	b.n	8001878 <HAL_RCC_OscConfig+0x298>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001832:	d115      	bne.n	8001860 <HAL_RCC_OscConfig+0x280>
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a05      	ldr	r2, [pc, #20]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800183a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a02      	ldr	r2, [pc, #8]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e014      	b.n	8001878 <HAL_RCC_OscConfig+0x298>
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	08004d44 	.word	0x08004d44
 8001858:	20000000 	.word	0x20000000
 800185c:	20000004 	.word	0x20000004
 8001860:	4ba0      	ldr	r3, [pc, #640]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a9f      	ldr	r2, [pc, #636]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b9d      	ldr	r3, [pc, #628]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a9c      	ldr	r2, [pc, #624]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fafc 	bl	8000e7c <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff faf8 	bl	8000e7c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e276      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189a:	4b92      	ldr	r3, [pc, #584]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x2a8>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fae8 	bl	8000e7c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fae4 	bl	8000e7c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e262      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c2:	4b88      	ldr	r3, [pc, #544]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2d0>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d060      	beq.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_OscConfig+0x310>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d119      	bne.n	800191e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d116      	bne.n	800191e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f0:	4b7c      	ldr	r3, [pc, #496]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_OscConfig+0x328>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e23f      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	4b76      	ldr	r3, [pc, #472]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	4973      	ldr	r1, [pc, #460]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191c:	e040      	b.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d023      	beq.n	800196e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001926:	4b6f      	ldr	r3, [pc, #444]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a6e      	ldr	r2, [pc, #440]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7ff faa3 	bl	8000e7c <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff fa9f 	bl	8000e7c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e21d      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194c:	4b65      	ldr	r3, [pc, #404]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b62      	ldr	r3, [pc, #392]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	495f      	ldr	r1, [pc, #380]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
 800196c:	e018      	b.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196e:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a5c      	ldr	r2, [pc, #368]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7ff fa7f 	bl	8000e7c <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001982:	f7ff fa7b 	bl	8000e7c <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1f9      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f0      	bne.n	8001982 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d03c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01c      	beq.n	80019ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b4:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ba:	4a4a      	ldr	r2, [pc, #296]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff fa5a 	bl	8000e7c <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff fa56 	bl	8000e7c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1d4      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019de:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80019e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ef      	beq.n	80019cc <HAL_RCC_OscConfig+0x3ec>
 80019ec:	e01b      	b.n	8001a26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ee:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80019f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f4:	4a3b      	ldr	r2, [pc, #236]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80019f6:	f023 0301 	bic.w	r3, r3, #1
 80019fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff fa3d 	bl	8000e7c <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a06:	f7ff fa39 	bl	8000e7c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e1b7      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1ef      	bne.n	8001a06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80a6 	beq.w	8001b80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a38:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10d      	bne.n	8001a60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_RCC_OscConfig+0x508>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d118      	bne.n	8001a9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_RCC_OscConfig+0x508>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_RCC_OscConfig+0x508>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a78:	f7ff fa00 	bl	8000e7c <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a80:	f7ff f9fc 	bl	8000e7c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e17a      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_RCC_OscConfig+0x508>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d108      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4d8>
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab6:	e029      	b.n	8001b0c <HAL_RCC_OscConfig+0x52c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d115      	bne.n	8001aec <HAL_RCC_OscConfig+0x50c>
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae0:	e014      	b.n	8001b0c <HAL_RCC_OscConfig+0x52c>
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	4b9c      	ldr	r3, [pc, #624]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	4a9b      	ldr	r2, [pc, #620]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afc:	4b98      	ldr	r3, [pc, #608]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	4a97      	ldr	r2, [pc, #604]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001b04:	f023 0304 	bic.w	r3, r3, #4
 8001b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d016      	beq.n	8001b42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff f9b2 	bl	8000e7c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f9ae 	bl	8000e7c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e12a      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b32:	4b8b      	ldr	r3, [pc, #556]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ed      	beq.n	8001b1c <HAL_RCC_OscConfig+0x53c>
 8001b40:	e015      	b.n	8001b6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff f99b 	bl	8000e7c <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff f997 	bl	8000e7c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e113      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b60:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ed      	bne.n	8001b4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b6e:	7ffb      	ldrb	r3, [r7, #31]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b74:	4b7a      	ldr	r3, [pc, #488]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	4a79      	ldr	r2, [pc, #484]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80fe 	beq.w	8001d86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	f040 80d0 	bne.w	8001d34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b94:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d130      	bne.n	8001c0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d127      	bne.n	8001c0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d11f      	bne.n	8001c0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bd4:	2a07      	cmp	r2, #7
 8001bd6:	bf14      	ite	ne
 8001bd8:	2201      	movne	r2, #1
 8001bda:	2200      	moveq	r2, #0
 8001bdc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d113      	bne.n	8001c0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d109      	bne.n	8001c0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	3b01      	subs	r3, #1
 8001c04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d06e      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2b0c      	cmp	r3, #12
 8001c0e:	d069      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c1c:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0ad      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c2c:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a4b      	ldr	r2, [pc, #300]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c38:	f7ff f920 	bl	8000e7c <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff f91c 	bl	8000e7c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e09a      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c52:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5e:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c6e:	3a01      	subs	r2, #1
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	4311      	orrs	r1, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c78:	0212      	lsls	r2, r2, #8
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c80:	0852      	lsrs	r2, r2, #1
 8001c82:	3a01      	subs	r2, #1
 8001c84:	0552      	lsls	r2, r2, #21
 8001c86:	4311      	orrs	r1, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c8c:	0852      	lsrs	r2, r2, #1
 8001c8e:	3a01      	subs	r2, #1
 8001c90:	0652      	lsls	r2, r2, #25
 8001c92:	4311      	orrs	r1, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c98:	0912      	lsrs	r2, r2, #4
 8001c9a:	0452      	lsls	r2, r2, #17
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	4930      	ldr	r1, [pc, #192]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a2d      	ldr	r2, [pc, #180]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4a2a      	ldr	r2, [pc, #168]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cbc:	f7ff f8de 	bl	8000e7c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7ff f8da 	bl	8000e7c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e058      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce2:	e050      	b.n	8001d86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e04f      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d148      	bne.n	8001d86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d0c:	f7ff f8b6 	bl	8000e7c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff f8b2 	bl	8000e7c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e030      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x734>
 8001d32:	e028      	b.n	8001d86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d023      	beq.n	8001d82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <HAL_RCC_OscConfig+0x780>)
 8001d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff f899 	bl	8000e7c <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4c:	e00c      	b.n	8001d68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7ff f895 	bl	8000e7c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d905      	bls.n	8001d68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e013      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
 8001d60:	40021000 	.word	0x40021000
 8001d64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_OscConfig+0x7b0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ec      	bne.n	8001d4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_RCC_OscConfig+0x7b0>)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	4905      	ldr	r1, [pc, #20]	; (8001d90 <HAL_RCC_OscConfig+0x7b0>)
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_RCC_OscConfig+0x7b4>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
 8001d80:	e001      	b.n	8001d86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	feeefffc 	.word	0xfeeefffc

08001d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0e7      	b.n	8001f7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dac:	4b75      	ldr	r3, [pc, #468]	; (8001f84 <HAL_RCC_ClockConfig+0x1ec>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d910      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <HAL_RCC_ClockConfig+0x1ec>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 0207 	bic.w	r2, r3, #7
 8001dc2:	4970      	ldr	r1, [pc, #448]	; (8001f84 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b6e      	ldr	r3, [pc, #440]	; (8001f84 <HAL_RCC_ClockConfig+0x1ec>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0cf      	b.n	8001f7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d010      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	4b66      	ldr	r3, [pc, #408]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d908      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df8:	4b63      	ldr	r3, [pc, #396]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4960      	ldr	r1, [pc, #384]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d04c      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d121      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0a6      	b.n	8001f7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e36:	4b54      	ldr	r3, [pc, #336]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d115      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e09a      	b.n	8001f7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e4e:	4b4e      	ldr	r3, [pc, #312]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e08e      	b.n	8001f7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e086      	b.n	8001f7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f023 0203 	bic.w	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4943      	ldr	r1, [pc, #268]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e80:	f7fe fffc 	bl	8000e7c <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7fe fff8 	bl	8000e7c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e06e      	b.n	8001f7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 020c 	and.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1eb      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d010      	beq.n	8001ede <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d208      	bcs.n	8001ede <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ecc:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	492b      	ldr	r1, [pc, #172]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d210      	bcs.n	8001f0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_RCC_ClockConfig+0x1ec>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 0207 	bic.w	r2, r3, #7
 8001ef4:	4923      	ldr	r1, [pc, #140]	; (8001f84 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_RCC_ClockConfig+0x1ec>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e036      	b.n	8001f7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	4918      	ldr	r1, [pc, #96]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d009      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4910      	ldr	r1, [pc, #64]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f4c:	f000 f824 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	490b      	ldr	r1, [pc, #44]	; (8001f8c <HAL_RCC_ClockConfig+0x1f4>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1fc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe ff33 	bl	8000ddc <HAL_InitTick>
 8001f76:	4603      	mov	r3, r0
 8001f78:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	08004d44 	.word	0x08004d44
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x34>
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d121      	bne.n	800200a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d11e      	bne.n	800200a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fcc:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fd8:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e005      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ff4:	4a2b      	ldr	r2, [pc, #172]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10d      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b04      	cmp	r3, #4
 800200e:	d102      	bne.n	8002016 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	e004      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d101      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800201c:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_RCC_GetSysClockFreq+0x114>)
 800201e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d134      	bne.n	8002090 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d003      	beq.n	800203e <HAL_RCC_GetSysClockFreq+0xa6>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d003      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0xac>
 800203c:	e005      	b.n	800204a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002040:	617b      	str	r3, [r7, #20]
      break;
 8002042:	e005      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002046:	617b      	str	r3, [r7, #20]
      break;
 8002048:	e002      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	617b      	str	r3, [r7, #20]
      break;
 800204e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	3301      	adds	r3, #1
 800205c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	0a1b      	lsrs	r3, r3, #8
 8002064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	fb03 f202 	mul.w	r2, r3, r2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	0e5b      	lsrs	r3, r3, #25
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	3301      	adds	r3, #1
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002090:	69bb      	ldr	r3, [r7, #24]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08004d5c 	.word	0x08004d5c
 80020a8:	00f42400 	.word	0x00f42400
 80020ac:	007a1200 	.word	0x007a1200

080020b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000000 	.word	0x20000000

080020c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020cc:	f7ff fff0 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4904      	ldr	r1, [pc, #16]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08004d54 	.word	0x08004d54

080020f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020f8:	f7ff ffda 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	0adb      	lsrs	r3, r3, #11
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	4904      	ldr	r1, [pc, #16]	; (800211c <HAL_RCC_GetPCLK2Freq+0x28>)
 800210a:	5ccb      	ldrb	r3, [r1, r3]
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	08004d54 	.word	0x08004d54

08002120 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002138:	f7ff f9ee 	bl	8001518 <HAL_PWREx_GetVoltageRange>
 800213c:	6178      	str	r0, [r7, #20]
 800213e:	e014      	b.n	800216a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	4a24      	ldr	r2, [pc, #144]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	6593      	str	r3, [r2, #88]	; 0x58
 800214c:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002158:	f7ff f9de 	bl	8001518 <HAL_PWREx_GetVoltageRange>
 800215c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002168:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002170:	d10b      	bne.n	800218a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d919      	bls.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2ba0      	cmp	r3, #160	; 0xa0
 800217c:	d902      	bls.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800217e:	2302      	movs	r3, #2
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	e013      	b.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002184:	2301      	movs	r3, #1
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	e010      	b.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b80      	cmp	r3, #128	; 0x80
 800218e:	d902      	bls.n	8002196 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002190:	2303      	movs	r3, #3
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	e00a      	b.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b80      	cmp	r3, #128	; 0x80
 800219a:	d102      	bne.n	80021a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800219c:	2302      	movs	r3, #2
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	e004      	b.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b70      	cmp	r3, #112	; 0x70
 80021a6:	d101      	bne.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021a8:	2301      	movs	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 0207 	bic.w	r2, r3, #7
 80021b4:	4909      	ldr	r1, [pc, #36]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d001      	beq.n	80021ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40022000 	.word	0x40022000

080021e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021e8:	2300      	movs	r3, #0
 80021ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021ec:	2300      	movs	r3, #0
 80021ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d041      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002200:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002204:	d02a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002206:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800220a:	d824      	bhi.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800220c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002210:	d008      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002212:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002216:	d81e      	bhi.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800221c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002220:	d010      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002222:	e018      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002224:	4b86      	ldr	r3, [pc, #536]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a85      	ldr	r2, [pc, #532]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002230:	e015      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3304      	adds	r3, #4
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fabb 	bl	80027b4 <RCCEx_PLLSAI1_Config>
 800223e:	4603      	mov	r3, r0
 8002240:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002242:	e00c      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3320      	adds	r3, #32
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fba6 	bl	800299c <RCCEx_PLLSAI2_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002254:	e003      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	74fb      	strb	r3, [r7, #19]
      break;
 800225a:	e000      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800225c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800225e:	7cfb      	ldrb	r3, [r7, #19]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002264:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002272:	4973      	ldr	r1, [pc, #460]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800227a:	e001      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d041      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002290:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002294:	d02a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002296:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800229a:	d824      	bhi.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800229c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022a0:	d008      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022a6:	d81e      	bhi.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b0:	d010      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022b2:	e018      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022b4:	4b62      	ldr	r3, [pc, #392]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a61      	ldr	r2, [pc, #388]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022c0:	e015      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fa73 	bl	80027b4 <RCCEx_PLLSAI1_Config>
 80022ce:	4603      	mov	r3, r0
 80022d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022d2:	e00c      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3320      	adds	r3, #32
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fb5e 	bl	800299c <RCCEx_PLLSAI2_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022e4:	e003      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	74fb      	strb	r3, [r7, #19]
      break;
 80022ea:	e000      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ee:	7cfb      	ldrb	r3, [r7, #19]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022f4:	4b52      	ldr	r3, [pc, #328]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002302:	494f      	ldr	r1, [pc, #316]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800230a:	e001      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a0 	beq.w	800245e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002332:	2300      	movs	r3, #0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00d      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002338:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	4a40      	ldr	r2, [pc, #256]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002342:	6593      	str	r3, [r2, #88]	; 0x58
 8002344:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002350:	2301      	movs	r3, #1
 8002352:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002354:	4b3b      	ldr	r3, [pc, #236]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a3a      	ldr	r2, [pc, #232]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002360:	f7fe fd8c 	bl	8000e7c <HAL_GetTick>
 8002364:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002366:	e009      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7fe fd88 	bl	8000e7c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d902      	bls.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	74fb      	strb	r3, [r7, #19]
        break;
 800237a:	e005      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800237c:	4b31      	ldr	r3, [pc, #196]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ef      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d15c      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002398:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01f      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d019      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023ac:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023b8:	4b21      	ldr	r3, [pc, #132]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	4a20      	ldr	r2, [pc, #128]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023d8:	4a19      	ldr	r2, [pc, #100]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe fd47 	bl	8000e7c <HAL_GetTick>
 80023ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f0:	e00b      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fd43 	bl	8000e7c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d902      	bls.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	74fb      	strb	r3, [r7, #19]
            break;
 8002408:	e006      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ec      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800242e:	4904      	ldr	r1, [pc, #16]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002436:	e009      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	74bb      	strb	r3, [r7, #18]
 800243c:	e006      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800244c:	7c7b      	ldrb	r3, [r7, #17]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d105      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002452:	4b9e      	ldr	r3, [pc, #632]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	4a9d      	ldr	r2, [pc, #628]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800246a:	4b98      	ldr	r3, [pc, #608]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f023 0203 	bic.w	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	4994      	ldr	r1, [pc, #592]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800248c:	4b8f      	ldr	r3, [pc, #572]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 020c 	bic.w	r2, r3, #12
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249a:	498c      	ldr	r1, [pc, #560]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ae:	4b87      	ldr	r3, [pc, #540]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	4983      	ldr	r1, [pc, #524]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d0:	4b7e      	ldr	r3, [pc, #504]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	497b      	ldr	r1, [pc, #492]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00a      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024f2:	4b76      	ldr	r3, [pc, #472]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002500:	4972      	ldr	r1, [pc, #456]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002514:	4b6d      	ldr	r3, [pc, #436]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	496a      	ldr	r1, [pc, #424]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002536:	4b65      	ldr	r3, [pc, #404]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002544:	4961      	ldr	r1, [pc, #388]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002558:	4b5c      	ldr	r3, [pc, #368]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002566:	4959      	ldr	r1, [pc, #356]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800257a:	4b54      	ldr	r3, [pc, #336]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002588:	4950      	ldr	r1, [pc, #320]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800259c:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	4948      	ldr	r1, [pc, #288]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025be:	4b43      	ldr	r3, [pc, #268]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	493f      	ldr	r1, [pc, #252]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d028      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025e0:	4b3a      	ldr	r3, [pc, #232]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ee:	4937      	ldr	r1, [pc, #220]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025fe:	d106      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002600:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a31      	ldr	r2, [pc, #196]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260a:	60d3      	str	r3, [r2, #12]
 800260c:	e011      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002616:	d10c      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3304      	adds	r3, #4
 800261c:	2101      	movs	r1, #1
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f8c8 	bl	80027b4 <RCCEx_PLLSAI1_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d028      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	491f      	ldr	r1, [pc, #124]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800265c:	d106      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002668:	60d3      	str	r3, [r2, #12]
 800266a:	e011      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002674:	d10c      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3304      	adds	r3, #4
 800267a:	2101      	movs	r1, #1
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f899 	bl	80027b4 <RCCEx_PLLSAI1_Config>
 8002682:	4603      	mov	r3, r0
 8002684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002686:	7cfb      	ldrb	r3, [r7, #19]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800268c:	7cfb      	ldrb	r3, [r7, #19]
 800268e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d02b      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	4908      	ldr	r1, [pc, #32]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ba:	d109      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a02      	ldr	r2, [pc, #8]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c6:	60d3      	str	r3, [r2, #12]
 80026c8:	e014      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	2101      	movs	r1, #1
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 f867 	bl	80027b4 <RCCEx_PLLSAI1_Config>
 80026e6:	4603      	mov	r3, r0
 80026e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ea:	7cfb      	ldrb	r3, [r7, #19]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d02f      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800270e:	4928      	ldr	r1, [pc, #160]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800271a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800271e:	d10d      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3304      	adds	r3, #4
 8002724:	2102      	movs	r1, #2
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f844 	bl	80027b4 <RCCEx_PLLSAI1_Config>
 800272c:	4603      	mov	r3, r0
 800272e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d014      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	74bb      	strb	r3, [r7, #18]
 800273a:	e011      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002744:	d10c      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3320      	adds	r3, #32
 800274a:	2102      	movs	r1, #2
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f925 	bl	800299c <RCCEx_PLLSAI2_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800277a:	490d      	ldr	r1, [pc, #52]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800279e:	4904      	ldr	r1, [pc, #16]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000

080027b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027c2:	4b75      	ldr	r3, [pc, #468]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d018      	beq.n	8002800 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027ce:	4b72      	ldr	r3, [pc, #456]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0203 	and.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d10d      	bne.n	80027fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
       ||
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027e6:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
       ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d047      	beq.n	800288a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
 80027fe:	e044      	b.n	800288a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d018      	beq.n	800283a <RCCEx_PLLSAI1_Config+0x86>
 8002808:	2b03      	cmp	r3, #3
 800280a:	d825      	bhi.n	8002858 <RCCEx_PLLSAI1_Config+0xa4>
 800280c:	2b01      	cmp	r3, #1
 800280e:	d002      	beq.n	8002816 <RCCEx_PLLSAI1_Config+0x62>
 8002810:	2b02      	cmp	r3, #2
 8002812:	d009      	beq.n	8002828 <RCCEx_PLLSAI1_Config+0x74>
 8002814:	e020      	b.n	8002858 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002816:	4b60      	ldr	r3, [pc, #384]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11d      	bne.n	800285e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002826:	e01a      	b.n	800285e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002828:	4b5b      	ldr	r3, [pc, #364]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d116      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002838:	e013      	b.n	8002862 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800283a:	4b57      	ldr	r3, [pc, #348]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10f      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002846:	4b54      	ldr	r3, [pc, #336]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002856:	e006      	b.n	8002866 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      break;
 800285c:	e004      	b.n	8002868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800285e:	bf00      	nop
 8002860:	e002      	b.n	8002868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002862:	bf00      	nop
 8002864:	e000      	b.n	8002868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002866:	bf00      	nop
    }

    if(status == HAL_OK)
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800286e:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6819      	ldr	r1, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	430b      	orrs	r3, r1
 8002884:	4944      	ldr	r1, [pc, #272]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d17d      	bne.n	800298c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002890:	4b41      	ldr	r3, [pc, #260]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a40      	ldr	r2, [pc, #256]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002896:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800289a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fe faee 	bl	8000e7c <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028a2:	e009      	b.n	80028b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a4:	f7fe faea 	bl	8000e7c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d902      	bls.n	80028b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	73fb      	strb	r3, [r7, #15]
        break;
 80028b6:	e005      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028b8:	4b37      	ldr	r3, [pc, #220]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ef      	bne.n	80028a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d160      	bne.n	800298c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d111      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d0:	4b31      	ldr	r3, [pc, #196]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6892      	ldr	r2, [r2, #8]
 80028e0:	0211      	lsls	r1, r2, #8
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68d2      	ldr	r2, [r2, #12]
 80028e6:	0912      	lsrs	r2, r2, #4
 80028e8:	0452      	lsls	r2, r2, #17
 80028ea:	430a      	orrs	r2, r1
 80028ec:	492a      	ldr	r1, [pc, #168]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	610b      	str	r3, [r1, #16]
 80028f2:	e027      	b.n	8002944 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d112      	bne.n	8002920 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028fa:	4b27      	ldr	r3, [pc, #156]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002902:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6892      	ldr	r2, [r2, #8]
 800290a:	0211      	lsls	r1, r2, #8
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6912      	ldr	r2, [r2, #16]
 8002910:	0852      	lsrs	r2, r2, #1
 8002912:	3a01      	subs	r2, #1
 8002914:	0552      	lsls	r2, r2, #21
 8002916:	430a      	orrs	r2, r1
 8002918:	491f      	ldr	r1, [pc, #124]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	610b      	str	r3, [r1, #16]
 800291e:	e011      	b.n	8002944 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002928:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6892      	ldr	r2, [r2, #8]
 8002930:	0211      	lsls	r1, r2, #8
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6952      	ldr	r2, [r2, #20]
 8002936:	0852      	lsrs	r2, r2, #1
 8002938:	3a01      	subs	r2, #1
 800293a:	0652      	lsls	r2, r2, #25
 800293c:	430a      	orrs	r2, r1
 800293e:	4916      	ldr	r1, [pc, #88]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002944:	4b14      	ldr	r3, [pc, #80]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a13      	ldr	r2, [pc, #76]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800294e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fe fa94 	bl	8000e7c <HAL_GetTick>
 8002954:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002956:	e009      	b.n	800296c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002958:	f7fe fa90 	bl	8000e7c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d902      	bls.n	800296c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	73fb      	strb	r3, [r7, #15]
          break;
 800296a:	e005      	b.n	8002978 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ef      	beq.n	8002958 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	4904      	ldr	r1, [pc, #16]	; (8002998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800298c:	7bfb      	ldrb	r3, [r7, #15]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000

0800299c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029aa:	4b6a      	ldr	r3, [pc, #424]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d018      	beq.n	80029e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029b6:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0203 	and.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d10d      	bne.n	80029e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
       ||
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d009      	beq.n	80029e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029ce:	4b61      	ldr	r3, [pc, #388]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
       ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d047      	beq.n	8002a72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	e044      	b.n	8002a72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d018      	beq.n	8002a22 <RCCEx_PLLSAI2_Config+0x86>
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d825      	bhi.n	8002a40 <RCCEx_PLLSAI2_Config+0xa4>
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d002      	beq.n	80029fe <RCCEx_PLLSAI2_Config+0x62>
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d009      	beq.n	8002a10 <RCCEx_PLLSAI2_Config+0x74>
 80029fc:	e020      	b.n	8002a40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029fe:	4b55      	ldr	r3, [pc, #340]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d11d      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0e:	e01a      	b.n	8002a46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d116      	bne.n	8002a4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a20:	e013      	b.n	8002a4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a22:	4b4c      	ldr	r3, [pc, #304]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a2e:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a3e:	e006      	b.n	8002a4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      break;
 8002a44:	e004      	b.n	8002a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a46:	bf00      	nop
 8002a48:	e002      	b.n	8002a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e000      	b.n	8002a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10d      	bne.n	8002a72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a56:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	4939      	ldr	r1, [pc, #228]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d167      	bne.n	8002b48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a78:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a35      	ldr	r2, [pc, #212]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a84:	f7fe f9fa 	bl	8000e7c <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a8a:	e009      	b.n	8002aa0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a8c:	f7fe f9f6 	bl	8000e7c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d902      	bls.n	8002aa0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a9e:	e005      	b.n	8002aac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aa0:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ef      	bne.n	8002a8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d14a      	bne.n	8002b48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d111      	bne.n	8002adc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ab8:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6892      	ldr	r2, [r2, #8]
 8002ac8:	0211      	lsls	r1, r2, #8
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68d2      	ldr	r2, [r2, #12]
 8002ace:	0912      	lsrs	r2, r2, #4
 8002ad0:	0452      	lsls	r2, r2, #17
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	491f      	ldr	r1, [pc, #124]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	614b      	str	r3, [r1, #20]
 8002ada:	e011      	b.n	8002b00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6892      	ldr	r2, [r2, #8]
 8002aec:	0211      	lsls	r1, r2, #8
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6912      	ldr	r2, [r2, #16]
 8002af2:	0852      	lsrs	r2, r2, #1
 8002af4:	3a01      	subs	r2, #1
 8002af6:	0652      	lsls	r2, r2, #25
 8002af8:	430a      	orrs	r2, r1
 8002afa:	4916      	ldr	r1, [pc, #88]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7fe f9b6 	bl	8000e7c <HAL_GetTick>
 8002b10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b12:	e009      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b14:	f7fe f9b2 	bl	8000e7c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d902      	bls.n	8002b28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	73fb      	strb	r3, [r7, #15]
          break;
 8002b26:	e005      	b.n	8002b34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ef      	beq.n	8002b14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	4904      	ldr	r1, [pc, #16]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000

08002b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e049      	b.n	8002bfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe f83a 	bl	8000bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f000 fb0c 	bl	80031b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6a1a      	ldr	r2, [r3, #32]
 8002c14:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <HAL_TIM_Base_Stop+0x38>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	f240 4344 	movw	r3, #1092	; 0x444
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <HAL_TIM_Base_Stop+0x38>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d001      	beq.n	8002c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e04f      	b.n	8002d0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a23      	ldr	r2, [pc, #140]	; (8002d18 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <HAL_TIM_Base_Start_IT+0x76>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c96:	d018      	beq.n	8002cca <HAL_TIM_Base_Start_IT+0x76>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <HAL_TIM_Base_Start_IT+0xc8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_TIM_Base_Start_IT+0x76>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_TIM_Base_Start_IT+0x76>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_TIM_Base_Start_IT+0x76>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <HAL_TIM_Base_Start_IT+0xd4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_TIM_Base_Start_IT+0x76>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <HAL_TIM_Base_Start_IT+0xd8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d115      	bne.n	8002cf6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <HAL_TIM_Base_Start_IT+0xdc>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b06      	cmp	r3, #6
 8002cda:	d015      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0xb4>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce2:	d011      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf4:	e008      	b.n	8002d08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e000      	b.n	8002d0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40000800 	.word	0x40000800
 8002d24:	40000c00 	.word	0x40000c00
 8002d28:	40013400 	.word	0x40013400
 8002d2c:	40014000 	.word	0x40014000
 8002d30:	00010007 	.word	0x00010007

08002d34 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6a1a      	ldr	r2, [r3, #32]
 8002d52:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10f      	bne.n	8002d7c <HAL_TIM_Base_Stop_IT+0x48>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	f240 4344 	movw	r3, #1092	; 0x444
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d107      	bne.n	8002d7c <HAL_TIM_Base_Stop_IT+0x48>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d122      	bne.n	8002dee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d11b      	bne.n	8002dee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f06f 0202 	mvn.w	r2, #2
 8002dbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f9ce 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8002dda:	e005      	b.n	8002de8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f9c0 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9d1 	bl	800318a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d122      	bne.n	8002e42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d11b      	bne.n	8002e42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f06f 0204 	mvn.w	r2, #4
 8002e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f9a4 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8002e2e:	e005      	b.n	8002e3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f996 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f9a7 	bl	800318a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d122      	bne.n	8002e96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d11b      	bne.n	8002e96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0208 	mvn.w	r2, #8
 8002e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f97a 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8002e82:	e005      	b.n	8002e90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f96c 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f97d 	bl	800318a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b10      	cmp	r3, #16
 8002ea2:	d122      	bne.n	8002eea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d11b      	bne.n	8002eea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f06f 0210 	mvn.w	r2, #16
 8002eba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2208      	movs	r2, #8
 8002ec0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f950 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8002ed6:	e005      	b.n	8002ee4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f942 	bl	8003162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f953 	bl	800318a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d10e      	bne.n	8002f16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f06f 0201 	mvn.w	r2, #1
 8002f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7fd fcdb 	bl	80008cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f20:	2b80      	cmp	r3, #128	; 0x80
 8002f22:	d10e      	bne.n	8002f42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	2b80      	cmp	r3, #128	; 0x80
 8002f30:	d107      	bne.n	8002f42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 faff 	bl	8003540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f50:	d10e      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5c:	2b80      	cmp	r3, #128	; 0x80
 8002f5e:	d107      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 faf2 	bl	8003554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7a:	2b40      	cmp	r3, #64	; 0x40
 8002f7c:	d10e      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f88:	2b40      	cmp	r3, #64	; 0x40
 8002f8a:	d107      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f901 	bl	800319e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d107      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0220 	mvn.w	r2, #32
 8002fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fab2 	bl	800352c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_TIM_ConfigClockSource+0x1c>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e0b6      	b.n	800315a <HAL_TIM_ConfigClockSource+0x18a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800300e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003028:	d03e      	beq.n	80030a8 <HAL_TIM_ConfigClockSource+0xd8>
 800302a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302e:	f200 8087 	bhi.w	8003140 <HAL_TIM_ConfigClockSource+0x170>
 8003032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003036:	f000 8086 	beq.w	8003146 <HAL_TIM_ConfigClockSource+0x176>
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303e:	d87f      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x170>
 8003040:	2b70      	cmp	r3, #112	; 0x70
 8003042:	d01a      	beq.n	800307a <HAL_TIM_ConfigClockSource+0xaa>
 8003044:	2b70      	cmp	r3, #112	; 0x70
 8003046:	d87b      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x170>
 8003048:	2b60      	cmp	r3, #96	; 0x60
 800304a:	d050      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x11e>
 800304c:	2b60      	cmp	r3, #96	; 0x60
 800304e:	d877      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x170>
 8003050:	2b50      	cmp	r3, #80	; 0x50
 8003052:	d03c      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0xfe>
 8003054:	2b50      	cmp	r3, #80	; 0x50
 8003056:	d873      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x170>
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d058      	beq.n	800310e <HAL_TIM_ConfigClockSource+0x13e>
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d86f      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x170>
 8003060:	2b30      	cmp	r3, #48	; 0x30
 8003062:	d064      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x15e>
 8003064:	2b30      	cmp	r3, #48	; 0x30
 8003066:	d86b      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x170>
 8003068:	2b20      	cmp	r3, #32
 800306a:	d060      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x15e>
 800306c:	2b20      	cmp	r3, #32
 800306e:	d867      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x170>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d05c      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x15e>
 8003074:	2b10      	cmp	r3, #16
 8003076:	d05a      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x15e>
 8003078:	e062      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6899      	ldr	r1, [r3, #8]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f000 f9a7 	bl	80033dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800309c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	609a      	str	r2, [r3, #8]
      break;
 80030a6:	e04f      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6899      	ldr	r1, [r3, #8]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f000 f990 	bl	80033dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ca:	609a      	str	r2, [r3, #8]
      break;
 80030cc:	e03c      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	461a      	mov	r2, r3
 80030dc:	f000 f904 	bl	80032e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2150      	movs	r1, #80	; 0x50
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f95d 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 80030ec:	e02c      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6859      	ldr	r1, [r3, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f000 f923 	bl	8003346 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2160      	movs	r1, #96	; 0x60
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f94d 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 800310c:	e01c      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6859      	ldr	r1, [r3, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	461a      	mov	r2, r3
 800311c:	f000 f8e4 	bl	80032e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2140      	movs	r1, #64	; 0x40
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f93d 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 800312c:	e00c      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4619      	mov	r1, r3
 8003138:	4610      	mov	r0, r2
 800313a:	f000 f934 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 800313e:	e003      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      break;
 8003144:	e000      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a40      	ldr	r2, [pc, #256]	; (80032c8 <TIM_Base_SetConfig+0x114>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d013      	beq.n	80031f4 <TIM_Base_SetConfig+0x40>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d2:	d00f      	beq.n	80031f4 <TIM_Base_SetConfig+0x40>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a3d      	ldr	r2, [pc, #244]	; (80032cc <TIM_Base_SetConfig+0x118>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00b      	beq.n	80031f4 <TIM_Base_SetConfig+0x40>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a3c      	ldr	r2, [pc, #240]	; (80032d0 <TIM_Base_SetConfig+0x11c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <TIM_Base_SetConfig+0x40>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a3b      	ldr	r2, [pc, #236]	; (80032d4 <TIM_Base_SetConfig+0x120>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_Base_SetConfig+0x40>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <TIM_Base_SetConfig+0x124>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d108      	bne.n	8003206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a2f      	ldr	r2, [pc, #188]	; (80032c8 <TIM_Base_SetConfig+0x114>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01f      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003214:	d01b      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <TIM_Base_SetConfig+0x118>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d017      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <TIM_Base_SetConfig+0x11c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a2a      	ldr	r2, [pc, #168]	; (80032d4 <TIM_Base_SetConfig+0x120>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00f      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a29      	ldr	r2, [pc, #164]	; (80032d8 <TIM_Base_SetConfig+0x124>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00b      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a28      	ldr	r2, [pc, #160]	; (80032dc <TIM_Base_SetConfig+0x128>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d007      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <TIM_Base_SetConfig+0x12c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d003      	beq.n	800324e <TIM_Base_SetConfig+0x9a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <TIM_Base_SetConfig+0x130>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d108      	bne.n	8003260 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <TIM_Base_SetConfig+0x114>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00f      	beq.n	80032ac <TIM_Base_SetConfig+0xf8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <TIM_Base_SetConfig+0x124>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <TIM_Base_SetConfig+0xf8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a11      	ldr	r2, [pc, #68]	; (80032dc <TIM_Base_SetConfig+0x128>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0xf8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <TIM_Base_SetConfig+0x12c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0xf8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <TIM_Base_SetConfig+0x130>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d103      	bne.n	80032b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	615a      	str	r2, [r3, #20]
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40000c00 	.word	0x40000c00
 80032d8:	40013400 	.word	0x40013400
 80032dc:	40014000 	.word	0x40014000
 80032e0:	40014400 	.word	0x40014400
 80032e4:	40014800 	.word	0x40014800

080032e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f023 0201 	bic.w	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f023 030a 	bic.w	r3, r3, #10
 8003324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003346:	b480      	push	{r7}
 8003348:	b087      	sub	sp, #28
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f023 0210 	bic.w	r2, r3, #16
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	031b      	lsls	r3, r3, #12
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003382:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f043 0307 	orr.w	r3, r3, #7
 80033c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	609a      	str	r2, [r3, #8]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	021a      	lsls	r2, r3, #8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	431a      	orrs	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	609a      	str	r2, [r3, #8]
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003430:	2302      	movs	r3, #2
 8003432:	e068      	b.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a2e      	ldr	r2, [pc, #184]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d004      	beq.n	8003468 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a2d      	ldr	r2, [pc, #180]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d108      	bne.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800346e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003480:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01d      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a6:	d018      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1b      	ldr	r2, [pc, #108]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a13      	ldr	r2, [pc, #76]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10c      	bne.n	80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40013400 	.word	0x40013400
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800
 8003524:	40000c00 	.word	0x40000c00
 8003528:	40014000 	.word	0x40014000

0800352c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e040      	b.n	80035fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fb88 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f992 	bl	80038d0 <UART_SetConfig>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e022      	b.n	80035fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fc3e 	bl	8003e40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fcc5 	bl	8003f84 <UART_CheckIdleState>
 80035fa:	4603      	mov	r3, r0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003618:	2b20      	cmp	r3, #32
 800361a:	f040 8082 	bne.w	8003722 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_UART_Transmit+0x26>
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07a      	b.n	8003724 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_UART_Transmit+0x38>
 8003638:	2302      	movs	r3, #2
 800363a:	e073      	b.n	8003724 <HAL_UART_Transmit+0x120>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2221      	movs	r2, #33	; 0x21
 8003650:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003652:	f7fd fc13 	bl	8000e7c <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d108      	bne.n	8003684 <HAL_UART_Transmit+0x80>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	e003      	b.n	800368c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003694:	e02d      	b.n	80036f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2200      	movs	r2, #0
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fcb8 	bl	8004016 <UART_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e039      	b.n	8003724 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10b      	bne.n	80036ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	881a      	ldrh	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c2:	b292      	uxth	r2, r2
 80036c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	3302      	adds	r3, #2
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	e008      	b.n	80036e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	b292      	uxth	r2, r2
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3301      	adds	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1cb      	bne.n	8003696 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2200      	movs	r2, #0
 8003706:	2140      	movs	r1, #64	; 0x40
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fc84 	bl	8004016 <UART_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e005      	b.n	8003724 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
  }
}
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003740:	2b20      	cmp	r3, #32
 8003742:	f040 80bf 	bne.w	80038c4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_UART_Receive+0x26>
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0b7      	b.n	80038c6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_UART_Receive+0x38>
 8003760:	2302      	movs	r3, #2
 8003762:	e0b0      	b.n	80038c6 <HAL_UART_Receive+0x19a>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2222      	movs	r2, #34	; 0x22
 8003778:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003780:	f7fd fb7c 	bl	8000e7c <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	88fa      	ldrh	r2, [r7, #6]
 800378a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379e:	d10e      	bne.n	80037be <HAL_UART_Receive+0x92>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_UART_Receive+0x88>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037b2:	e02d      	b.n	8003810 <HAL_UART_Receive+0xe4>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	22ff      	movs	r2, #255	; 0xff
 80037b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037bc:	e028      	b.n	8003810 <HAL_UART_Receive+0xe4>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10d      	bne.n	80037e2 <HAL_UART_Receive+0xb6>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <HAL_UART_Receive+0xac>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	22ff      	movs	r2, #255	; 0xff
 80037d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d6:	e01b      	b.n	8003810 <HAL_UART_Receive+0xe4>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	227f      	movs	r2, #127	; 0x7f
 80037dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037e0:	e016      	b.n	8003810 <HAL_UART_Receive+0xe4>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ea:	d10d      	bne.n	8003808 <HAL_UART_Receive+0xdc>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <HAL_UART_Receive+0xd2>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	227f      	movs	r2, #127	; 0x7f
 80037f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037fc:	e008      	b.n	8003810 <HAL_UART_Receive+0xe4>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	223f      	movs	r2, #63	; 0x3f
 8003802:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003806:	e003      	b.n	8003810 <HAL_UART_Receive+0xe4>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003816:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003820:	d108      	bne.n	8003834 <HAL_UART_Receive+0x108>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d104      	bne.n	8003834 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	e003      	b.n	800383c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003844:	e033      	b.n	80038ae <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	2120      	movs	r1, #32
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fbe0 	bl	8004016 <UART_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e032      	b.n	80038c6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10c      	bne.n	8003880 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800386c:	b29a      	uxth	r2, r3
 800386e:	8a7b      	ldrh	r3, [r7, #18]
 8003870:	4013      	ands	r3, r2
 8003872:	b29a      	uxth	r2, r3
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	3302      	adds	r3, #2
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	e00d      	b.n	800389c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003886:	b29b      	uxth	r3, r3
 8003888:	b2da      	uxtb	r2, r3
 800388a:	8a7b      	ldrh	r3, [r7, #18]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	4013      	ands	r3, r2
 8003890:	b2da      	uxtb	r2, r3
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3301      	adds	r3, #1
 800389a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1c5      	bne.n	8003846 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d4:	b08a      	sub	sp, #40	; 0x28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4ba4      	ldr	r3, [pc, #656]	; (8003b90 <UART_SetConfig+0x2c0>)
 8003900:	4013      	ands	r3, r2
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003908:	430b      	orrs	r3, r1
 800390a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a99      	ldr	r2, [pc, #612]	; (8003b94 <UART_SetConfig+0x2c4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	4313      	orrs	r3, r2
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a90      	ldr	r2, [pc, #576]	; (8003b98 <UART_SetConfig+0x2c8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d126      	bne.n	80039a8 <UART_SetConfig+0xd8>
 800395a:	4b90      	ldr	r3, [pc, #576]	; (8003b9c <UART_SetConfig+0x2cc>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b03      	cmp	r3, #3
 8003966:	d81b      	bhi.n	80039a0 <UART_SetConfig+0xd0>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <UART_SetConfig+0xa0>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	08003981 	.word	0x08003981
 8003974:	08003991 	.word	0x08003991
 8003978:	08003989 	.word	0x08003989
 800397c:	08003999 	.word	0x08003999
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003986:	e116      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003988:	2302      	movs	r3, #2
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e112      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003990:	2304      	movs	r3, #4
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e10e      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003998:	2308      	movs	r3, #8
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e10a      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 80039a0:	2310      	movs	r3, #16
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e106      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a7c      	ldr	r2, [pc, #496]	; (8003ba0 <UART_SetConfig+0x2d0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d138      	bne.n	8003a24 <UART_SetConfig+0x154>
 80039b2:	4b7a      	ldr	r3, [pc, #488]	; (8003b9c <UART_SetConfig+0x2cc>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d82d      	bhi.n	8003a1c <UART_SetConfig+0x14c>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0xf8>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003a1d 	.word	0x08003a1d
 80039d0:	08003a1d 	.word	0x08003a1d
 80039d4:	08003a1d 	.word	0x08003a1d
 80039d8:	08003a0d 	.word	0x08003a0d
 80039dc:	08003a1d 	.word	0x08003a1d
 80039e0:	08003a1d 	.word	0x08003a1d
 80039e4:	08003a1d 	.word	0x08003a1d
 80039e8:	08003a05 	.word	0x08003a05
 80039ec:	08003a1d 	.word	0x08003a1d
 80039f0:	08003a1d 	.word	0x08003a1d
 80039f4:	08003a1d 	.word	0x08003a1d
 80039f8:	08003a15 	.word	0x08003a15
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a02:	e0d8      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003a04:	2302      	movs	r3, #2
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e0d4      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e0d0      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003a14:	2308      	movs	r3, #8
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e0cc      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e0c8      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a5e      	ldr	r2, [pc, #376]	; (8003ba4 <UART_SetConfig+0x2d4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d125      	bne.n	8003a7a <UART_SetConfig+0x1aa>
 8003a2e:	4b5b      	ldr	r3, [pc, #364]	; (8003b9c <UART_SetConfig+0x2cc>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a38:	2b30      	cmp	r3, #48	; 0x30
 8003a3a:	d016      	beq.n	8003a6a <UART_SetConfig+0x19a>
 8003a3c:	2b30      	cmp	r3, #48	; 0x30
 8003a3e:	d818      	bhi.n	8003a72 <UART_SetConfig+0x1a2>
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d00a      	beq.n	8003a5a <UART_SetConfig+0x18a>
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d814      	bhi.n	8003a72 <UART_SetConfig+0x1a2>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <UART_SetConfig+0x182>
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d008      	beq.n	8003a62 <UART_SetConfig+0x192>
 8003a50:	e00f      	b.n	8003a72 <UART_SetConfig+0x1a2>
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a58:	e0ad      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a60:	e0a9      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003a62:	2304      	movs	r3, #4
 8003a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a68:	e0a5      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a70:	e0a1      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003a72:	2310      	movs	r3, #16
 8003a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a78:	e09d      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ba8 <UART_SetConfig+0x2d8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d125      	bne.n	8003ad0 <UART_SetConfig+0x200>
 8003a84:	4b45      	ldr	r3, [pc, #276]	; (8003b9c <UART_SetConfig+0x2cc>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a90:	d016      	beq.n	8003ac0 <UART_SetConfig+0x1f0>
 8003a92:	2bc0      	cmp	r3, #192	; 0xc0
 8003a94:	d818      	bhi.n	8003ac8 <UART_SetConfig+0x1f8>
 8003a96:	2b80      	cmp	r3, #128	; 0x80
 8003a98:	d00a      	beq.n	8003ab0 <UART_SetConfig+0x1e0>
 8003a9a:	2b80      	cmp	r3, #128	; 0x80
 8003a9c:	d814      	bhi.n	8003ac8 <UART_SetConfig+0x1f8>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <UART_SetConfig+0x1d8>
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d008      	beq.n	8003ab8 <UART_SetConfig+0x1e8>
 8003aa6:	e00f      	b.n	8003ac8 <UART_SetConfig+0x1f8>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	e082      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab6:	e07e      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003abe:	e07a      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac6:	e076      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ace:	e072      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a35      	ldr	r2, [pc, #212]	; (8003bac <UART_SetConfig+0x2dc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d12a      	bne.n	8003b30 <UART_SetConfig+0x260>
 8003ada:	4b30      	ldr	r3, [pc, #192]	; (8003b9c <UART_SetConfig+0x2cc>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae8:	d01a      	beq.n	8003b20 <UART_SetConfig+0x250>
 8003aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aee:	d81b      	bhi.n	8003b28 <UART_SetConfig+0x258>
 8003af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af4:	d00c      	beq.n	8003b10 <UART_SetConfig+0x240>
 8003af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afa:	d815      	bhi.n	8003b28 <UART_SetConfig+0x258>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <UART_SetConfig+0x238>
 8003b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b04:	d008      	beq.n	8003b18 <UART_SetConfig+0x248>
 8003b06:	e00f      	b.n	8003b28 <UART_SetConfig+0x258>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0e:	e052      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003b10:	2302      	movs	r3, #2
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b16:	e04e      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003b18:	2304      	movs	r3, #4
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1e:	e04a      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003b20:	2308      	movs	r3, #8
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b26:	e046      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2e:	e042      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <UART_SetConfig+0x2c4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d13a      	bne.n	8003bb0 <UART_SetConfig+0x2e0>
 8003b3a:	4b18      	ldr	r3, [pc, #96]	; (8003b9c <UART_SetConfig+0x2cc>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b48:	d01a      	beq.n	8003b80 <UART_SetConfig+0x2b0>
 8003b4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b4e:	d81b      	bhi.n	8003b88 <UART_SetConfig+0x2b8>
 8003b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b54:	d00c      	beq.n	8003b70 <UART_SetConfig+0x2a0>
 8003b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5a:	d815      	bhi.n	8003b88 <UART_SetConfig+0x2b8>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <UART_SetConfig+0x298>
 8003b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b64:	d008      	beq.n	8003b78 <UART_SetConfig+0x2a8>
 8003b66:	e00f      	b.n	8003b88 <UART_SetConfig+0x2b8>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6e:	e022      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003b70:	2302      	movs	r3, #2
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b76:	e01e      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7e:	e01a      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003b80:	2308      	movs	r3, #8
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b86:	e016      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003b88:	2310      	movs	r3, #16
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8e:	e012      	b.n	8003bb6 <UART_SetConfig+0x2e6>
 8003b90:	efff69f3 	.word	0xefff69f3
 8003b94:	40008000 	.word	0x40008000
 8003b98:	40013800 	.word	0x40013800
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40004400 	.word	0x40004400
 8003ba4:	40004800 	.word	0x40004800
 8003ba8:	40004c00 	.word	0x40004c00
 8003bac:	40005000 	.word	0x40005000
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a9f      	ldr	r2, [pc, #636]	; (8003e38 <UART_SetConfig+0x568>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d17a      	bne.n	8003cb6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d824      	bhi.n	8003c12 <UART_SetConfig+0x342>
 8003bc8:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <UART_SetConfig+0x300>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003c13 	.word	0x08003c13
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003c13 	.word	0x08003c13
 8003be0:	08003c03 	.word	0x08003c03
 8003be4:	08003c13 	.word	0x08003c13
 8003be8:	08003c13 	.word	0x08003c13
 8003bec:	08003c13 	.word	0x08003c13
 8003bf0:	08003c0b 	.word	0x08003c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f7fe fa68 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 8003bf8:	61f8      	str	r0, [r7, #28]
        break;
 8003bfa:	e010      	b.n	8003c1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bfc:	4b8f      	ldr	r3, [pc, #572]	; (8003e3c <UART_SetConfig+0x56c>)
 8003bfe:	61fb      	str	r3, [r7, #28]
        break;
 8003c00:	e00d      	b.n	8003c1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c02:	f7fe f9c9 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8003c06:	61f8      	str	r0, [r7, #28]
        break;
 8003c08:	e009      	b.n	8003c1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0e:	61fb      	str	r3, [r7, #28]
        break;
 8003c10:	e005      	b.n	8003c1e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80fb 	beq.w	8003e1c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	4413      	add	r3, r2
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d305      	bcc.n	8003c42 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d903      	bls.n	8003c4a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c48:	e0e8      	b.n	8003e1c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	461c      	mov	r4, r3
 8003c50:	4615      	mov	r5, r2
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	022b      	lsls	r3, r5, #8
 8003c5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c60:	0222      	lsls	r2, r4, #8
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	6849      	ldr	r1, [r1, #4]
 8003c66:	0849      	lsrs	r1, r1, #1
 8003c68:	2000      	movs	r0, #0
 8003c6a:	4688      	mov	r8, r1
 8003c6c:	4681      	mov	r9, r0
 8003c6e:	eb12 0a08 	adds.w	sl, r2, r8
 8003c72:	eb43 0b09 	adc.w	fp, r3, r9
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c84:	4650      	mov	r0, sl
 8003c86:	4659      	mov	r1, fp
 8003c88:	f7fc fa9e 	bl	80001c8 <__aeabi_uldivmod>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4613      	mov	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c9a:	d308      	bcc.n	8003cae <UART_SetConfig+0x3de>
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca2:	d204      	bcs.n	8003cae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	e0b6      	b.n	8003e1c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cb4:	e0b2      	b.n	8003e1c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cbe:	d15e      	bne.n	8003d7e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d828      	bhi.n	8003d1a <UART_SetConfig+0x44a>
 8003cc8:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <UART_SetConfig+0x400>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	08003cfd 	.word	0x08003cfd
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	08003d1b 	.word	0x08003d1b
 8003ce0:	08003d0b 	.word	0x08003d0b
 8003ce4:	08003d1b 	.word	0x08003d1b
 8003ce8:	08003d1b 	.word	0x08003d1b
 8003cec:	08003d1b 	.word	0x08003d1b
 8003cf0:	08003d13 	.word	0x08003d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf4:	f7fe f9e8 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 8003cf8:	61f8      	str	r0, [r7, #28]
        break;
 8003cfa:	e014      	b.n	8003d26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cfc:	f7fe f9fa 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
 8003d00:	61f8      	str	r0, [r7, #28]
        break;
 8003d02:	e010      	b.n	8003d26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d04:	4b4d      	ldr	r3, [pc, #308]	; (8003e3c <UART_SetConfig+0x56c>)
 8003d06:	61fb      	str	r3, [r7, #28]
        break;
 8003d08:	e00d      	b.n	8003d26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0a:	f7fe f945 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8003d0e:	61f8      	str	r0, [r7, #28]
        break;
 8003d10:	e009      	b.n	8003d26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d16:	61fb      	str	r3, [r7, #28]
        break;
 8003d18:	e005      	b.n	8003d26 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d077      	beq.n	8003e1c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	005a      	lsls	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	441a      	add	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b0f      	cmp	r3, #15
 8003d46:	d916      	bls.n	8003d76 <UART_SetConfig+0x4a6>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4e:	d212      	bcs.n	8003d76 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f023 030f 	bic.w	r3, r3, #15
 8003d58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	8afb      	ldrh	r3, [r7, #22]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	8afa      	ldrh	r2, [r7, #22]
 8003d72:	60da      	str	r2, [r3, #12]
 8003d74:	e052      	b.n	8003e1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d7c:	e04e      	b.n	8003e1c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d827      	bhi.n	8003dd6 <UART_SetConfig+0x506>
 8003d86:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <UART_SetConfig+0x4bc>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08003db9 	.word	0x08003db9
 8003d94:	08003dc1 	.word	0x08003dc1
 8003d98:	08003dd7 	.word	0x08003dd7
 8003d9c:	08003dc7 	.word	0x08003dc7
 8003da0:	08003dd7 	.word	0x08003dd7
 8003da4:	08003dd7 	.word	0x08003dd7
 8003da8:	08003dd7 	.word	0x08003dd7
 8003dac:	08003dcf 	.word	0x08003dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db0:	f7fe f98a 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 8003db4:	61f8      	str	r0, [r7, #28]
        break;
 8003db6:	e014      	b.n	8003de2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7fe f99c 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
 8003dbc:	61f8      	str	r0, [r7, #28]
        break;
 8003dbe:	e010      	b.n	8003de2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <UART_SetConfig+0x56c>)
 8003dc2:	61fb      	str	r3, [r7, #28]
        break;
 8003dc4:	e00d      	b.n	8003de2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc6:	f7fe f8e7 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8003dca:	61f8      	str	r0, [r7, #28]
        break;
 8003dcc:	e009      	b.n	8003de2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd2:	61fb      	str	r3, [r7, #28]
        break;
 8003dd4:	e005      	b.n	8003de2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003de0:	bf00      	nop
    }

    if (pclk != 0U)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d019      	beq.n	8003e1c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	085a      	lsrs	r2, r3, #1
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	441a      	add	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	d909      	bls.n	8003e16 <UART_SetConfig+0x546>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d205      	bcs.n	8003e16 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60da      	str	r2, [r3, #12]
 8003e14:	e002      	b.n	8003e1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3728      	adds	r7, #40	; 0x28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e36:	bf00      	nop
 8003e38:	40008000 	.word	0x40008000
 8003e3c:	00f42400 	.word	0x00f42400

08003e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01a      	beq.n	8003f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3e:	d10a      	bne.n	8003f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	605a      	str	r2, [r3, #4]
  }
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f94:	f7fc ff72 	bl	8000e7c <HAL_GetTick>
 8003f98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d10e      	bne.n	8003fc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f82d 	bl	8004016 <UART_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e023      	b.n	800400e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d10e      	bne.n	8003ff2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f817 	bl	8004016 <UART_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e00d      	b.n	800400e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b09c      	sub	sp, #112	; 0x70
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	4613      	mov	r3, r2
 8004024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004026:	e0a5      	b.n	8004174 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	f000 80a1 	beq.w	8004174 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004032:	f7fc ff23 	bl	8000e7c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800403e:	429a      	cmp	r2, r3
 8004040:	d302      	bcc.n	8004048 <UART_WaitOnFlagUntilTimeout+0x32>
 8004042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004044:	2b00      	cmp	r3, #0
 8004046:	d13e      	bne.n	80040c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004058:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800405c:	667b      	str	r3, [r7, #100]	; 0x64
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004068:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800406c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e6      	bne.n	8004048 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	663b      	str	r3, [r7, #96]	; 0x60
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3308      	adds	r3, #8
 8004098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800409a:	64ba      	str	r2, [r7, #72]	; 0x48
 800409c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e5      	bne.n	800407a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e067      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d04f      	beq.n	8004174 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e2:	d147      	bne.n	8004174 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004102:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
 800410e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e6      	bne.n	80040ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3308      	adds	r3, #8
 8004126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	613b      	str	r3, [r7, #16]
   return(result);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	66bb      	str	r3, [r7, #104]	; 0x68
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3308      	adds	r3, #8
 800413e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004140:	623a      	str	r2, [r7, #32]
 8004142:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	69f9      	ldr	r1, [r7, #28]
 8004146:	6a3a      	ldr	r2, [r7, #32]
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	61bb      	str	r3, [r7, #24]
   return(result);
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e5      	bne.n	8004120 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e010      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69da      	ldr	r2, [r3, #28]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	429a      	cmp	r2, r3
 8004190:	f43f af4a 	beq.w	8004028 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3770      	adds	r7, #112	; 0x70
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <__errno>:
 80041a0:	4b01      	ldr	r3, [pc, #4]	; (80041a8 <__errno+0x8>)
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	2000000c 	.word	0x2000000c

080041ac <__libc_init_array>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	4d0d      	ldr	r5, [pc, #52]	; (80041e4 <__libc_init_array+0x38>)
 80041b0:	4c0d      	ldr	r4, [pc, #52]	; (80041e8 <__libc_init_array+0x3c>)
 80041b2:	1b64      	subs	r4, r4, r5
 80041b4:	10a4      	asrs	r4, r4, #2
 80041b6:	2600      	movs	r6, #0
 80041b8:	42a6      	cmp	r6, r4
 80041ba:	d109      	bne.n	80041d0 <__libc_init_array+0x24>
 80041bc:	4d0b      	ldr	r5, [pc, #44]	; (80041ec <__libc_init_array+0x40>)
 80041be:	4c0c      	ldr	r4, [pc, #48]	; (80041f0 <__libc_init_array+0x44>)
 80041c0:	f000 fd1e 	bl	8004c00 <_init>
 80041c4:	1b64      	subs	r4, r4, r5
 80041c6:	10a4      	asrs	r4, r4, #2
 80041c8:	2600      	movs	r6, #0
 80041ca:	42a6      	cmp	r6, r4
 80041cc:	d105      	bne.n	80041da <__libc_init_array+0x2e>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d4:	4798      	blx	r3
 80041d6:	3601      	adds	r6, #1
 80041d8:	e7ee      	b.n	80041b8 <__libc_init_array+0xc>
 80041da:	f855 3b04 	ldr.w	r3, [r5], #4
 80041de:	4798      	blx	r3
 80041e0:	3601      	adds	r6, #1
 80041e2:	e7f2      	b.n	80041ca <__libc_init_array+0x1e>
 80041e4:	08004df8 	.word	0x08004df8
 80041e8:	08004df8 	.word	0x08004df8
 80041ec:	08004df8 	.word	0x08004df8
 80041f0:	08004dfc 	.word	0x08004dfc

080041f4 <memset>:
 80041f4:	4402      	add	r2, r0
 80041f6:	4603      	mov	r3, r0
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d100      	bne.n	80041fe <memset+0xa>
 80041fc:	4770      	bx	lr
 80041fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004202:	e7f9      	b.n	80041f8 <memset+0x4>

08004204 <_puts_r>:
 8004204:	b570      	push	{r4, r5, r6, lr}
 8004206:	460e      	mov	r6, r1
 8004208:	4605      	mov	r5, r0
 800420a:	b118      	cbz	r0, 8004214 <_puts_r+0x10>
 800420c:	6983      	ldr	r3, [r0, #24]
 800420e:	b90b      	cbnz	r3, 8004214 <_puts_r+0x10>
 8004210:	f000 fa48 	bl	80046a4 <__sinit>
 8004214:	69ab      	ldr	r3, [r5, #24]
 8004216:	68ac      	ldr	r4, [r5, #8]
 8004218:	b913      	cbnz	r3, 8004220 <_puts_r+0x1c>
 800421a:	4628      	mov	r0, r5
 800421c:	f000 fa42 	bl	80046a4 <__sinit>
 8004220:	4b2c      	ldr	r3, [pc, #176]	; (80042d4 <_puts_r+0xd0>)
 8004222:	429c      	cmp	r4, r3
 8004224:	d120      	bne.n	8004268 <_puts_r+0x64>
 8004226:	686c      	ldr	r4, [r5, #4]
 8004228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800422a:	07db      	lsls	r3, r3, #31
 800422c:	d405      	bmi.n	800423a <_puts_r+0x36>
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	0598      	lsls	r0, r3, #22
 8004232:	d402      	bmi.n	800423a <_puts_r+0x36>
 8004234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004236:	f000 fad3 	bl	80047e0 <__retarget_lock_acquire_recursive>
 800423a:	89a3      	ldrh	r3, [r4, #12]
 800423c:	0719      	lsls	r1, r3, #28
 800423e:	d51d      	bpl.n	800427c <_puts_r+0x78>
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	b1db      	cbz	r3, 800427c <_puts_r+0x78>
 8004244:	3e01      	subs	r6, #1
 8004246:	68a3      	ldr	r3, [r4, #8]
 8004248:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800424c:	3b01      	subs	r3, #1
 800424e:	60a3      	str	r3, [r4, #8]
 8004250:	bb39      	cbnz	r1, 80042a2 <_puts_r+0x9e>
 8004252:	2b00      	cmp	r3, #0
 8004254:	da38      	bge.n	80042c8 <_puts_r+0xc4>
 8004256:	4622      	mov	r2, r4
 8004258:	210a      	movs	r1, #10
 800425a:	4628      	mov	r0, r5
 800425c:	f000 f848 	bl	80042f0 <__swbuf_r>
 8004260:	3001      	adds	r0, #1
 8004262:	d011      	beq.n	8004288 <_puts_r+0x84>
 8004264:	250a      	movs	r5, #10
 8004266:	e011      	b.n	800428c <_puts_r+0x88>
 8004268:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <_puts_r+0xd4>)
 800426a:	429c      	cmp	r4, r3
 800426c:	d101      	bne.n	8004272 <_puts_r+0x6e>
 800426e:	68ac      	ldr	r4, [r5, #8]
 8004270:	e7da      	b.n	8004228 <_puts_r+0x24>
 8004272:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <_puts_r+0xd8>)
 8004274:	429c      	cmp	r4, r3
 8004276:	bf08      	it	eq
 8004278:	68ec      	ldreq	r4, [r5, #12]
 800427a:	e7d5      	b.n	8004228 <_puts_r+0x24>
 800427c:	4621      	mov	r1, r4
 800427e:	4628      	mov	r0, r5
 8004280:	f000 f888 	bl	8004394 <__swsetup_r>
 8004284:	2800      	cmp	r0, #0
 8004286:	d0dd      	beq.n	8004244 <_puts_r+0x40>
 8004288:	f04f 35ff 	mov.w	r5, #4294967295
 800428c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800428e:	07da      	lsls	r2, r3, #31
 8004290:	d405      	bmi.n	800429e <_puts_r+0x9a>
 8004292:	89a3      	ldrh	r3, [r4, #12]
 8004294:	059b      	lsls	r3, r3, #22
 8004296:	d402      	bmi.n	800429e <_puts_r+0x9a>
 8004298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800429a:	f000 faa2 	bl	80047e2 <__retarget_lock_release_recursive>
 800429e:	4628      	mov	r0, r5
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	da04      	bge.n	80042b0 <_puts_r+0xac>
 80042a6:	69a2      	ldr	r2, [r4, #24]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	dc06      	bgt.n	80042ba <_puts_r+0xb6>
 80042ac:	290a      	cmp	r1, #10
 80042ae:	d004      	beq.n	80042ba <_puts_r+0xb6>
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	6022      	str	r2, [r4, #0]
 80042b6:	7019      	strb	r1, [r3, #0]
 80042b8:	e7c5      	b.n	8004246 <_puts_r+0x42>
 80042ba:	4622      	mov	r2, r4
 80042bc:	4628      	mov	r0, r5
 80042be:	f000 f817 	bl	80042f0 <__swbuf_r>
 80042c2:	3001      	adds	r0, #1
 80042c4:	d1bf      	bne.n	8004246 <_puts_r+0x42>
 80042c6:	e7df      	b.n	8004288 <_puts_r+0x84>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	250a      	movs	r5, #10
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	6022      	str	r2, [r4, #0]
 80042d0:	701d      	strb	r5, [r3, #0]
 80042d2:	e7db      	b.n	800428c <_puts_r+0x88>
 80042d4:	08004db0 	.word	0x08004db0
 80042d8:	08004dd0 	.word	0x08004dd0
 80042dc:	08004d90 	.word	0x08004d90

080042e0 <puts>:
 80042e0:	4b02      	ldr	r3, [pc, #8]	; (80042ec <puts+0xc>)
 80042e2:	4601      	mov	r1, r0
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	f7ff bf8d 	b.w	8004204 <_puts_r>
 80042ea:	bf00      	nop
 80042ec:	2000000c 	.word	0x2000000c

080042f0 <__swbuf_r>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	460e      	mov	r6, r1
 80042f4:	4614      	mov	r4, r2
 80042f6:	4605      	mov	r5, r0
 80042f8:	b118      	cbz	r0, 8004302 <__swbuf_r+0x12>
 80042fa:	6983      	ldr	r3, [r0, #24]
 80042fc:	b90b      	cbnz	r3, 8004302 <__swbuf_r+0x12>
 80042fe:	f000 f9d1 	bl	80046a4 <__sinit>
 8004302:	4b21      	ldr	r3, [pc, #132]	; (8004388 <__swbuf_r+0x98>)
 8004304:	429c      	cmp	r4, r3
 8004306:	d12b      	bne.n	8004360 <__swbuf_r+0x70>
 8004308:	686c      	ldr	r4, [r5, #4]
 800430a:	69a3      	ldr	r3, [r4, #24]
 800430c:	60a3      	str	r3, [r4, #8]
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	071a      	lsls	r2, r3, #28
 8004312:	d52f      	bpl.n	8004374 <__swbuf_r+0x84>
 8004314:	6923      	ldr	r3, [r4, #16]
 8004316:	b36b      	cbz	r3, 8004374 <__swbuf_r+0x84>
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	6820      	ldr	r0, [r4, #0]
 800431c:	1ac0      	subs	r0, r0, r3
 800431e:	6963      	ldr	r3, [r4, #20]
 8004320:	b2f6      	uxtb	r6, r6
 8004322:	4283      	cmp	r3, r0
 8004324:	4637      	mov	r7, r6
 8004326:	dc04      	bgt.n	8004332 <__swbuf_r+0x42>
 8004328:	4621      	mov	r1, r4
 800432a:	4628      	mov	r0, r5
 800432c:	f000 f926 	bl	800457c <_fflush_r>
 8004330:	bb30      	cbnz	r0, 8004380 <__swbuf_r+0x90>
 8004332:	68a3      	ldr	r3, [r4, #8]
 8004334:	3b01      	subs	r3, #1
 8004336:	60a3      	str	r3, [r4, #8]
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	6022      	str	r2, [r4, #0]
 800433e:	701e      	strb	r6, [r3, #0]
 8004340:	6963      	ldr	r3, [r4, #20]
 8004342:	3001      	adds	r0, #1
 8004344:	4283      	cmp	r3, r0
 8004346:	d004      	beq.n	8004352 <__swbuf_r+0x62>
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	07db      	lsls	r3, r3, #31
 800434c:	d506      	bpl.n	800435c <__swbuf_r+0x6c>
 800434e:	2e0a      	cmp	r6, #10
 8004350:	d104      	bne.n	800435c <__swbuf_r+0x6c>
 8004352:	4621      	mov	r1, r4
 8004354:	4628      	mov	r0, r5
 8004356:	f000 f911 	bl	800457c <_fflush_r>
 800435a:	b988      	cbnz	r0, 8004380 <__swbuf_r+0x90>
 800435c:	4638      	mov	r0, r7
 800435e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <__swbuf_r+0x9c>)
 8004362:	429c      	cmp	r4, r3
 8004364:	d101      	bne.n	800436a <__swbuf_r+0x7a>
 8004366:	68ac      	ldr	r4, [r5, #8]
 8004368:	e7cf      	b.n	800430a <__swbuf_r+0x1a>
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <__swbuf_r+0xa0>)
 800436c:	429c      	cmp	r4, r3
 800436e:	bf08      	it	eq
 8004370:	68ec      	ldreq	r4, [r5, #12]
 8004372:	e7ca      	b.n	800430a <__swbuf_r+0x1a>
 8004374:	4621      	mov	r1, r4
 8004376:	4628      	mov	r0, r5
 8004378:	f000 f80c 	bl	8004394 <__swsetup_r>
 800437c:	2800      	cmp	r0, #0
 800437e:	d0cb      	beq.n	8004318 <__swbuf_r+0x28>
 8004380:	f04f 37ff 	mov.w	r7, #4294967295
 8004384:	e7ea      	b.n	800435c <__swbuf_r+0x6c>
 8004386:	bf00      	nop
 8004388:	08004db0 	.word	0x08004db0
 800438c:	08004dd0 	.word	0x08004dd0
 8004390:	08004d90 	.word	0x08004d90

08004394 <__swsetup_r>:
 8004394:	4b32      	ldr	r3, [pc, #200]	; (8004460 <__swsetup_r+0xcc>)
 8004396:	b570      	push	{r4, r5, r6, lr}
 8004398:	681d      	ldr	r5, [r3, #0]
 800439a:	4606      	mov	r6, r0
 800439c:	460c      	mov	r4, r1
 800439e:	b125      	cbz	r5, 80043aa <__swsetup_r+0x16>
 80043a0:	69ab      	ldr	r3, [r5, #24]
 80043a2:	b913      	cbnz	r3, 80043aa <__swsetup_r+0x16>
 80043a4:	4628      	mov	r0, r5
 80043a6:	f000 f97d 	bl	80046a4 <__sinit>
 80043aa:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <__swsetup_r+0xd0>)
 80043ac:	429c      	cmp	r4, r3
 80043ae:	d10f      	bne.n	80043d0 <__swsetup_r+0x3c>
 80043b0:	686c      	ldr	r4, [r5, #4]
 80043b2:	89a3      	ldrh	r3, [r4, #12]
 80043b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043b8:	0719      	lsls	r1, r3, #28
 80043ba:	d42c      	bmi.n	8004416 <__swsetup_r+0x82>
 80043bc:	06dd      	lsls	r5, r3, #27
 80043be:	d411      	bmi.n	80043e4 <__swsetup_r+0x50>
 80043c0:	2309      	movs	r3, #9
 80043c2:	6033      	str	r3, [r6, #0]
 80043c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043c8:	81a3      	strh	r3, [r4, #12]
 80043ca:	f04f 30ff 	mov.w	r0, #4294967295
 80043ce:	e03e      	b.n	800444e <__swsetup_r+0xba>
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <__swsetup_r+0xd4>)
 80043d2:	429c      	cmp	r4, r3
 80043d4:	d101      	bne.n	80043da <__swsetup_r+0x46>
 80043d6:	68ac      	ldr	r4, [r5, #8]
 80043d8:	e7eb      	b.n	80043b2 <__swsetup_r+0x1e>
 80043da:	4b24      	ldr	r3, [pc, #144]	; (800446c <__swsetup_r+0xd8>)
 80043dc:	429c      	cmp	r4, r3
 80043de:	bf08      	it	eq
 80043e0:	68ec      	ldreq	r4, [r5, #12]
 80043e2:	e7e6      	b.n	80043b2 <__swsetup_r+0x1e>
 80043e4:	0758      	lsls	r0, r3, #29
 80043e6:	d512      	bpl.n	800440e <__swsetup_r+0x7a>
 80043e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ea:	b141      	cbz	r1, 80043fe <__swsetup_r+0x6a>
 80043ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043f0:	4299      	cmp	r1, r3
 80043f2:	d002      	beq.n	80043fa <__swsetup_r+0x66>
 80043f4:	4630      	mov	r0, r6
 80043f6:	f000 fa5b 	bl	80048b0 <_free_r>
 80043fa:	2300      	movs	r3, #0
 80043fc:	6363      	str	r3, [r4, #52]	; 0x34
 80043fe:	89a3      	ldrh	r3, [r4, #12]
 8004400:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004404:	81a3      	strh	r3, [r4, #12]
 8004406:	2300      	movs	r3, #0
 8004408:	6063      	str	r3, [r4, #4]
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	f043 0308 	orr.w	r3, r3, #8
 8004414:	81a3      	strh	r3, [r4, #12]
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	b94b      	cbnz	r3, 800442e <__swsetup_r+0x9a>
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004424:	d003      	beq.n	800442e <__swsetup_r+0x9a>
 8004426:	4621      	mov	r1, r4
 8004428:	4630      	mov	r0, r6
 800442a:	f000 fa01 	bl	8004830 <__smakebuf_r>
 800442e:	89a0      	ldrh	r0, [r4, #12]
 8004430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004434:	f010 0301 	ands.w	r3, r0, #1
 8004438:	d00a      	beq.n	8004450 <__swsetup_r+0xbc>
 800443a:	2300      	movs	r3, #0
 800443c:	60a3      	str	r3, [r4, #8]
 800443e:	6963      	ldr	r3, [r4, #20]
 8004440:	425b      	negs	r3, r3
 8004442:	61a3      	str	r3, [r4, #24]
 8004444:	6923      	ldr	r3, [r4, #16]
 8004446:	b943      	cbnz	r3, 800445a <__swsetup_r+0xc6>
 8004448:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800444c:	d1ba      	bne.n	80043c4 <__swsetup_r+0x30>
 800444e:	bd70      	pop	{r4, r5, r6, pc}
 8004450:	0781      	lsls	r1, r0, #30
 8004452:	bf58      	it	pl
 8004454:	6963      	ldrpl	r3, [r4, #20]
 8004456:	60a3      	str	r3, [r4, #8]
 8004458:	e7f4      	b.n	8004444 <__swsetup_r+0xb0>
 800445a:	2000      	movs	r0, #0
 800445c:	e7f7      	b.n	800444e <__swsetup_r+0xba>
 800445e:	bf00      	nop
 8004460:	2000000c 	.word	0x2000000c
 8004464:	08004db0 	.word	0x08004db0
 8004468:	08004dd0 	.word	0x08004dd0
 800446c:	08004d90 	.word	0x08004d90

08004470 <__sflush_r>:
 8004470:	898a      	ldrh	r2, [r1, #12]
 8004472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004476:	4605      	mov	r5, r0
 8004478:	0710      	lsls	r0, r2, #28
 800447a:	460c      	mov	r4, r1
 800447c:	d458      	bmi.n	8004530 <__sflush_r+0xc0>
 800447e:	684b      	ldr	r3, [r1, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	dc05      	bgt.n	8004490 <__sflush_r+0x20>
 8004484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	dc02      	bgt.n	8004490 <__sflush_r+0x20>
 800448a:	2000      	movs	r0, #0
 800448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004492:	2e00      	cmp	r6, #0
 8004494:	d0f9      	beq.n	800448a <__sflush_r+0x1a>
 8004496:	2300      	movs	r3, #0
 8004498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800449c:	682f      	ldr	r7, [r5, #0]
 800449e:	602b      	str	r3, [r5, #0]
 80044a0:	d032      	beq.n	8004508 <__sflush_r+0x98>
 80044a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044a4:	89a3      	ldrh	r3, [r4, #12]
 80044a6:	075a      	lsls	r2, r3, #29
 80044a8:	d505      	bpl.n	80044b6 <__sflush_r+0x46>
 80044aa:	6863      	ldr	r3, [r4, #4]
 80044ac:	1ac0      	subs	r0, r0, r3
 80044ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044b0:	b10b      	cbz	r3, 80044b6 <__sflush_r+0x46>
 80044b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044b4:	1ac0      	subs	r0, r0, r3
 80044b6:	2300      	movs	r3, #0
 80044b8:	4602      	mov	r2, r0
 80044ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044bc:	6a21      	ldr	r1, [r4, #32]
 80044be:	4628      	mov	r0, r5
 80044c0:	47b0      	blx	r6
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	89a3      	ldrh	r3, [r4, #12]
 80044c6:	d106      	bne.n	80044d6 <__sflush_r+0x66>
 80044c8:	6829      	ldr	r1, [r5, #0]
 80044ca:	291d      	cmp	r1, #29
 80044cc:	d82c      	bhi.n	8004528 <__sflush_r+0xb8>
 80044ce:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <__sflush_r+0x108>)
 80044d0:	40ca      	lsrs	r2, r1
 80044d2:	07d6      	lsls	r6, r2, #31
 80044d4:	d528      	bpl.n	8004528 <__sflush_r+0xb8>
 80044d6:	2200      	movs	r2, #0
 80044d8:	6062      	str	r2, [r4, #4]
 80044da:	04d9      	lsls	r1, r3, #19
 80044dc:	6922      	ldr	r2, [r4, #16]
 80044de:	6022      	str	r2, [r4, #0]
 80044e0:	d504      	bpl.n	80044ec <__sflush_r+0x7c>
 80044e2:	1c42      	adds	r2, r0, #1
 80044e4:	d101      	bne.n	80044ea <__sflush_r+0x7a>
 80044e6:	682b      	ldr	r3, [r5, #0]
 80044e8:	b903      	cbnz	r3, 80044ec <__sflush_r+0x7c>
 80044ea:	6560      	str	r0, [r4, #84]	; 0x54
 80044ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ee:	602f      	str	r7, [r5, #0]
 80044f0:	2900      	cmp	r1, #0
 80044f2:	d0ca      	beq.n	800448a <__sflush_r+0x1a>
 80044f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044f8:	4299      	cmp	r1, r3
 80044fa:	d002      	beq.n	8004502 <__sflush_r+0x92>
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 f9d7 	bl	80048b0 <_free_r>
 8004502:	2000      	movs	r0, #0
 8004504:	6360      	str	r0, [r4, #52]	; 0x34
 8004506:	e7c1      	b.n	800448c <__sflush_r+0x1c>
 8004508:	6a21      	ldr	r1, [r4, #32]
 800450a:	2301      	movs	r3, #1
 800450c:	4628      	mov	r0, r5
 800450e:	47b0      	blx	r6
 8004510:	1c41      	adds	r1, r0, #1
 8004512:	d1c7      	bne.n	80044a4 <__sflush_r+0x34>
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0c4      	beq.n	80044a4 <__sflush_r+0x34>
 800451a:	2b1d      	cmp	r3, #29
 800451c:	d001      	beq.n	8004522 <__sflush_r+0xb2>
 800451e:	2b16      	cmp	r3, #22
 8004520:	d101      	bne.n	8004526 <__sflush_r+0xb6>
 8004522:	602f      	str	r7, [r5, #0]
 8004524:	e7b1      	b.n	800448a <__sflush_r+0x1a>
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800452c:	81a3      	strh	r3, [r4, #12]
 800452e:	e7ad      	b.n	800448c <__sflush_r+0x1c>
 8004530:	690f      	ldr	r7, [r1, #16]
 8004532:	2f00      	cmp	r7, #0
 8004534:	d0a9      	beq.n	800448a <__sflush_r+0x1a>
 8004536:	0793      	lsls	r3, r2, #30
 8004538:	680e      	ldr	r6, [r1, #0]
 800453a:	bf08      	it	eq
 800453c:	694b      	ldreq	r3, [r1, #20]
 800453e:	600f      	str	r7, [r1, #0]
 8004540:	bf18      	it	ne
 8004542:	2300      	movne	r3, #0
 8004544:	eba6 0807 	sub.w	r8, r6, r7
 8004548:	608b      	str	r3, [r1, #8]
 800454a:	f1b8 0f00 	cmp.w	r8, #0
 800454e:	dd9c      	ble.n	800448a <__sflush_r+0x1a>
 8004550:	6a21      	ldr	r1, [r4, #32]
 8004552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004554:	4643      	mov	r3, r8
 8004556:	463a      	mov	r2, r7
 8004558:	4628      	mov	r0, r5
 800455a:	47b0      	blx	r6
 800455c:	2800      	cmp	r0, #0
 800455e:	dc06      	bgt.n	800456e <__sflush_r+0xfe>
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004566:	81a3      	strh	r3, [r4, #12]
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	e78e      	b.n	800448c <__sflush_r+0x1c>
 800456e:	4407      	add	r7, r0
 8004570:	eba8 0800 	sub.w	r8, r8, r0
 8004574:	e7e9      	b.n	800454a <__sflush_r+0xda>
 8004576:	bf00      	nop
 8004578:	20400001 	.word	0x20400001

0800457c <_fflush_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	690b      	ldr	r3, [r1, #16]
 8004580:	4605      	mov	r5, r0
 8004582:	460c      	mov	r4, r1
 8004584:	b913      	cbnz	r3, 800458c <_fflush_r+0x10>
 8004586:	2500      	movs	r5, #0
 8004588:	4628      	mov	r0, r5
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	b118      	cbz	r0, 8004596 <_fflush_r+0x1a>
 800458e:	6983      	ldr	r3, [r0, #24]
 8004590:	b90b      	cbnz	r3, 8004596 <_fflush_r+0x1a>
 8004592:	f000 f887 	bl	80046a4 <__sinit>
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <_fflush_r+0x6c>)
 8004598:	429c      	cmp	r4, r3
 800459a:	d11b      	bne.n	80045d4 <_fflush_r+0x58>
 800459c:	686c      	ldr	r4, [r5, #4]
 800459e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ef      	beq.n	8004586 <_fflush_r+0xa>
 80045a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045a8:	07d0      	lsls	r0, r2, #31
 80045aa:	d404      	bmi.n	80045b6 <_fflush_r+0x3a>
 80045ac:	0599      	lsls	r1, r3, #22
 80045ae:	d402      	bmi.n	80045b6 <_fflush_r+0x3a>
 80045b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045b2:	f000 f915 	bl	80047e0 <__retarget_lock_acquire_recursive>
 80045b6:	4628      	mov	r0, r5
 80045b8:	4621      	mov	r1, r4
 80045ba:	f7ff ff59 	bl	8004470 <__sflush_r>
 80045be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045c0:	07da      	lsls	r2, r3, #31
 80045c2:	4605      	mov	r5, r0
 80045c4:	d4e0      	bmi.n	8004588 <_fflush_r+0xc>
 80045c6:	89a3      	ldrh	r3, [r4, #12]
 80045c8:	059b      	lsls	r3, r3, #22
 80045ca:	d4dd      	bmi.n	8004588 <_fflush_r+0xc>
 80045cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ce:	f000 f908 	bl	80047e2 <__retarget_lock_release_recursive>
 80045d2:	e7d9      	b.n	8004588 <_fflush_r+0xc>
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <_fflush_r+0x70>)
 80045d6:	429c      	cmp	r4, r3
 80045d8:	d101      	bne.n	80045de <_fflush_r+0x62>
 80045da:	68ac      	ldr	r4, [r5, #8]
 80045dc:	e7df      	b.n	800459e <_fflush_r+0x22>
 80045de:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <_fflush_r+0x74>)
 80045e0:	429c      	cmp	r4, r3
 80045e2:	bf08      	it	eq
 80045e4:	68ec      	ldreq	r4, [r5, #12]
 80045e6:	e7da      	b.n	800459e <_fflush_r+0x22>
 80045e8:	08004db0 	.word	0x08004db0
 80045ec:	08004dd0 	.word	0x08004dd0
 80045f0:	08004d90 	.word	0x08004d90

080045f4 <std>:
 80045f4:	2300      	movs	r3, #0
 80045f6:	b510      	push	{r4, lr}
 80045f8:	4604      	mov	r4, r0
 80045fa:	e9c0 3300 	strd	r3, r3, [r0]
 80045fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004602:	6083      	str	r3, [r0, #8]
 8004604:	8181      	strh	r1, [r0, #12]
 8004606:	6643      	str	r3, [r0, #100]	; 0x64
 8004608:	81c2      	strh	r2, [r0, #14]
 800460a:	6183      	str	r3, [r0, #24]
 800460c:	4619      	mov	r1, r3
 800460e:	2208      	movs	r2, #8
 8004610:	305c      	adds	r0, #92	; 0x5c
 8004612:	f7ff fdef 	bl	80041f4 <memset>
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <std+0x38>)
 8004618:	6263      	str	r3, [r4, #36]	; 0x24
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <std+0x3c>)
 800461c:	62a3      	str	r3, [r4, #40]	; 0x28
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <std+0x40>)
 8004620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <std+0x44>)
 8004624:	6224      	str	r4, [r4, #32]
 8004626:	6323      	str	r3, [r4, #48]	; 0x30
 8004628:	bd10      	pop	{r4, pc}
 800462a:	bf00      	nop
 800462c:	08004a91 	.word	0x08004a91
 8004630:	08004ab3 	.word	0x08004ab3
 8004634:	08004aeb 	.word	0x08004aeb
 8004638:	08004b0f 	.word	0x08004b0f

0800463c <_cleanup_r>:
 800463c:	4901      	ldr	r1, [pc, #4]	; (8004644 <_cleanup_r+0x8>)
 800463e:	f000 b8af 	b.w	80047a0 <_fwalk_reent>
 8004642:	bf00      	nop
 8004644:	0800457d 	.word	0x0800457d

08004648 <__sfmoreglue>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	2268      	movs	r2, #104	; 0x68
 800464c:	1e4d      	subs	r5, r1, #1
 800464e:	4355      	muls	r5, r2
 8004650:	460e      	mov	r6, r1
 8004652:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004656:	f000 f997 	bl	8004988 <_malloc_r>
 800465a:	4604      	mov	r4, r0
 800465c:	b140      	cbz	r0, 8004670 <__sfmoreglue+0x28>
 800465e:	2100      	movs	r1, #0
 8004660:	e9c0 1600 	strd	r1, r6, [r0]
 8004664:	300c      	adds	r0, #12
 8004666:	60a0      	str	r0, [r4, #8]
 8004668:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800466c:	f7ff fdc2 	bl	80041f4 <memset>
 8004670:	4620      	mov	r0, r4
 8004672:	bd70      	pop	{r4, r5, r6, pc}

08004674 <__sfp_lock_acquire>:
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <__sfp_lock_acquire+0x8>)
 8004676:	f000 b8b3 	b.w	80047e0 <__retarget_lock_acquire_recursive>
 800467a:	bf00      	nop
 800467c:	20000169 	.word	0x20000169

08004680 <__sfp_lock_release>:
 8004680:	4801      	ldr	r0, [pc, #4]	; (8004688 <__sfp_lock_release+0x8>)
 8004682:	f000 b8ae 	b.w	80047e2 <__retarget_lock_release_recursive>
 8004686:	bf00      	nop
 8004688:	20000169 	.word	0x20000169

0800468c <__sinit_lock_acquire>:
 800468c:	4801      	ldr	r0, [pc, #4]	; (8004694 <__sinit_lock_acquire+0x8>)
 800468e:	f000 b8a7 	b.w	80047e0 <__retarget_lock_acquire_recursive>
 8004692:	bf00      	nop
 8004694:	2000016a 	.word	0x2000016a

08004698 <__sinit_lock_release>:
 8004698:	4801      	ldr	r0, [pc, #4]	; (80046a0 <__sinit_lock_release+0x8>)
 800469a:	f000 b8a2 	b.w	80047e2 <__retarget_lock_release_recursive>
 800469e:	bf00      	nop
 80046a0:	2000016a 	.word	0x2000016a

080046a4 <__sinit>:
 80046a4:	b510      	push	{r4, lr}
 80046a6:	4604      	mov	r4, r0
 80046a8:	f7ff fff0 	bl	800468c <__sinit_lock_acquire>
 80046ac:	69a3      	ldr	r3, [r4, #24]
 80046ae:	b11b      	cbz	r3, 80046b8 <__sinit+0x14>
 80046b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b4:	f7ff bff0 	b.w	8004698 <__sinit_lock_release>
 80046b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80046bc:	6523      	str	r3, [r4, #80]	; 0x50
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <__sinit+0x68>)
 80046c0:	4a13      	ldr	r2, [pc, #76]	; (8004710 <__sinit+0x6c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	bf04      	itt	eq
 80046ca:	2301      	moveq	r3, #1
 80046cc:	61a3      	streq	r3, [r4, #24]
 80046ce:	4620      	mov	r0, r4
 80046d0:	f000 f820 	bl	8004714 <__sfp>
 80046d4:	6060      	str	r0, [r4, #4]
 80046d6:	4620      	mov	r0, r4
 80046d8:	f000 f81c 	bl	8004714 <__sfp>
 80046dc:	60a0      	str	r0, [r4, #8]
 80046de:	4620      	mov	r0, r4
 80046e0:	f000 f818 	bl	8004714 <__sfp>
 80046e4:	2200      	movs	r2, #0
 80046e6:	60e0      	str	r0, [r4, #12]
 80046e8:	2104      	movs	r1, #4
 80046ea:	6860      	ldr	r0, [r4, #4]
 80046ec:	f7ff ff82 	bl	80045f4 <std>
 80046f0:	68a0      	ldr	r0, [r4, #8]
 80046f2:	2201      	movs	r2, #1
 80046f4:	2109      	movs	r1, #9
 80046f6:	f7ff ff7d 	bl	80045f4 <std>
 80046fa:	68e0      	ldr	r0, [r4, #12]
 80046fc:	2202      	movs	r2, #2
 80046fe:	2112      	movs	r1, #18
 8004700:	f7ff ff78 	bl	80045f4 <std>
 8004704:	2301      	movs	r3, #1
 8004706:	61a3      	str	r3, [r4, #24]
 8004708:	e7d2      	b.n	80046b0 <__sinit+0xc>
 800470a:	bf00      	nop
 800470c:	08004d8c 	.word	0x08004d8c
 8004710:	0800463d 	.word	0x0800463d

08004714 <__sfp>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	4607      	mov	r7, r0
 8004718:	f7ff ffac 	bl	8004674 <__sfp_lock_acquire>
 800471c:	4b1e      	ldr	r3, [pc, #120]	; (8004798 <__sfp+0x84>)
 800471e:	681e      	ldr	r6, [r3, #0]
 8004720:	69b3      	ldr	r3, [r6, #24]
 8004722:	b913      	cbnz	r3, 800472a <__sfp+0x16>
 8004724:	4630      	mov	r0, r6
 8004726:	f7ff ffbd 	bl	80046a4 <__sinit>
 800472a:	3648      	adds	r6, #72	; 0x48
 800472c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004730:	3b01      	subs	r3, #1
 8004732:	d503      	bpl.n	800473c <__sfp+0x28>
 8004734:	6833      	ldr	r3, [r6, #0]
 8004736:	b30b      	cbz	r3, 800477c <__sfp+0x68>
 8004738:	6836      	ldr	r6, [r6, #0]
 800473a:	e7f7      	b.n	800472c <__sfp+0x18>
 800473c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004740:	b9d5      	cbnz	r5, 8004778 <__sfp+0x64>
 8004742:	4b16      	ldr	r3, [pc, #88]	; (800479c <__sfp+0x88>)
 8004744:	60e3      	str	r3, [r4, #12]
 8004746:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800474a:	6665      	str	r5, [r4, #100]	; 0x64
 800474c:	f000 f847 	bl	80047de <__retarget_lock_init_recursive>
 8004750:	f7ff ff96 	bl	8004680 <__sfp_lock_release>
 8004754:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004758:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800475c:	6025      	str	r5, [r4, #0]
 800475e:	61a5      	str	r5, [r4, #24]
 8004760:	2208      	movs	r2, #8
 8004762:	4629      	mov	r1, r5
 8004764:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004768:	f7ff fd44 	bl	80041f4 <memset>
 800476c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004770:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004774:	4620      	mov	r0, r4
 8004776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004778:	3468      	adds	r4, #104	; 0x68
 800477a:	e7d9      	b.n	8004730 <__sfp+0x1c>
 800477c:	2104      	movs	r1, #4
 800477e:	4638      	mov	r0, r7
 8004780:	f7ff ff62 	bl	8004648 <__sfmoreglue>
 8004784:	4604      	mov	r4, r0
 8004786:	6030      	str	r0, [r6, #0]
 8004788:	2800      	cmp	r0, #0
 800478a:	d1d5      	bne.n	8004738 <__sfp+0x24>
 800478c:	f7ff ff78 	bl	8004680 <__sfp_lock_release>
 8004790:	230c      	movs	r3, #12
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	e7ee      	b.n	8004774 <__sfp+0x60>
 8004796:	bf00      	nop
 8004798:	08004d8c 	.word	0x08004d8c
 800479c:	ffff0001 	.word	0xffff0001

080047a0 <_fwalk_reent>:
 80047a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047a4:	4606      	mov	r6, r0
 80047a6:	4688      	mov	r8, r1
 80047a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047ac:	2700      	movs	r7, #0
 80047ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047b2:	f1b9 0901 	subs.w	r9, r9, #1
 80047b6:	d505      	bpl.n	80047c4 <_fwalk_reent+0x24>
 80047b8:	6824      	ldr	r4, [r4, #0]
 80047ba:	2c00      	cmp	r4, #0
 80047bc:	d1f7      	bne.n	80047ae <_fwalk_reent+0xe>
 80047be:	4638      	mov	r0, r7
 80047c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047c4:	89ab      	ldrh	r3, [r5, #12]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d907      	bls.n	80047da <_fwalk_reent+0x3a>
 80047ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047ce:	3301      	adds	r3, #1
 80047d0:	d003      	beq.n	80047da <_fwalk_reent+0x3a>
 80047d2:	4629      	mov	r1, r5
 80047d4:	4630      	mov	r0, r6
 80047d6:	47c0      	blx	r8
 80047d8:	4307      	orrs	r7, r0
 80047da:	3568      	adds	r5, #104	; 0x68
 80047dc:	e7e9      	b.n	80047b2 <_fwalk_reent+0x12>

080047de <__retarget_lock_init_recursive>:
 80047de:	4770      	bx	lr

080047e0 <__retarget_lock_acquire_recursive>:
 80047e0:	4770      	bx	lr

080047e2 <__retarget_lock_release_recursive>:
 80047e2:	4770      	bx	lr

080047e4 <__swhatbuf_r>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	460e      	mov	r6, r1
 80047e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ec:	2900      	cmp	r1, #0
 80047ee:	b096      	sub	sp, #88	; 0x58
 80047f0:	4614      	mov	r4, r2
 80047f2:	461d      	mov	r5, r3
 80047f4:	da08      	bge.n	8004808 <__swhatbuf_r+0x24>
 80047f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	602a      	str	r2, [r5, #0]
 80047fe:	061a      	lsls	r2, r3, #24
 8004800:	d410      	bmi.n	8004824 <__swhatbuf_r+0x40>
 8004802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004806:	e00e      	b.n	8004826 <__swhatbuf_r+0x42>
 8004808:	466a      	mov	r2, sp
 800480a:	f000 f9a7 	bl	8004b5c <_fstat_r>
 800480e:	2800      	cmp	r0, #0
 8004810:	dbf1      	blt.n	80047f6 <__swhatbuf_r+0x12>
 8004812:	9a01      	ldr	r2, [sp, #4]
 8004814:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004818:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800481c:	425a      	negs	r2, r3
 800481e:	415a      	adcs	r2, r3
 8004820:	602a      	str	r2, [r5, #0]
 8004822:	e7ee      	b.n	8004802 <__swhatbuf_r+0x1e>
 8004824:	2340      	movs	r3, #64	; 0x40
 8004826:	2000      	movs	r0, #0
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	b016      	add	sp, #88	; 0x58
 800482c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004830 <__smakebuf_r>:
 8004830:	898b      	ldrh	r3, [r1, #12]
 8004832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004834:	079d      	lsls	r5, r3, #30
 8004836:	4606      	mov	r6, r0
 8004838:	460c      	mov	r4, r1
 800483a:	d507      	bpl.n	800484c <__smakebuf_r+0x1c>
 800483c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	6123      	str	r3, [r4, #16]
 8004844:	2301      	movs	r3, #1
 8004846:	6163      	str	r3, [r4, #20]
 8004848:	b002      	add	sp, #8
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	ab01      	add	r3, sp, #4
 800484e:	466a      	mov	r2, sp
 8004850:	f7ff ffc8 	bl	80047e4 <__swhatbuf_r>
 8004854:	9900      	ldr	r1, [sp, #0]
 8004856:	4605      	mov	r5, r0
 8004858:	4630      	mov	r0, r6
 800485a:	f000 f895 	bl	8004988 <_malloc_r>
 800485e:	b948      	cbnz	r0, 8004874 <__smakebuf_r+0x44>
 8004860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004864:	059a      	lsls	r2, r3, #22
 8004866:	d4ef      	bmi.n	8004848 <__smakebuf_r+0x18>
 8004868:	f023 0303 	bic.w	r3, r3, #3
 800486c:	f043 0302 	orr.w	r3, r3, #2
 8004870:	81a3      	strh	r3, [r4, #12]
 8004872:	e7e3      	b.n	800483c <__smakebuf_r+0xc>
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <__smakebuf_r+0x7c>)
 8004876:	62b3      	str	r3, [r6, #40]	; 0x28
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	6020      	str	r0, [r4, #0]
 800487c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	9b00      	ldr	r3, [sp, #0]
 8004884:	6163      	str	r3, [r4, #20]
 8004886:	9b01      	ldr	r3, [sp, #4]
 8004888:	6120      	str	r0, [r4, #16]
 800488a:	b15b      	cbz	r3, 80048a4 <__smakebuf_r+0x74>
 800488c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004890:	4630      	mov	r0, r6
 8004892:	f000 f975 	bl	8004b80 <_isatty_r>
 8004896:	b128      	cbz	r0, 80048a4 <__smakebuf_r+0x74>
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	f023 0303 	bic.w	r3, r3, #3
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	81a3      	strh	r3, [r4, #12]
 80048a4:	89a0      	ldrh	r0, [r4, #12]
 80048a6:	4305      	orrs	r5, r0
 80048a8:	81a5      	strh	r5, [r4, #12]
 80048aa:	e7cd      	b.n	8004848 <__smakebuf_r+0x18>
 80048ac:	0800463d 	.word	0x0800463d

080048b0 <_free_r>:
 80048b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048b2:	2900      	cmp	r1, #0
 80048b4:	d044      	beq.n	8004940 <_free_r+0x90>
 80048b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ba:	9001      	str	r0, [sp, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f1a1 0404 	sub.w	r4, r1, #4
 80048c2:	bfb8      	it	lt
 80048c4:	18e4      	addlt	r4, r4, r3
 80048c6:	f000 f97d 	bl	8004bc4 <__malloc_lock>
 80048ca:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <_free_r+0x94>)
 80048cc:	9801      	ldr	r0, [sp, #4]
 80048ce:	6813      	ldr	r3, [r2, #0]
 80048d0:	b933      	cbnz	r3, 80048e0 <_free_r+0x30>
 80048d2:	6063      	str	r3, [r4, #4]
 80048d4:	6014      	str	r4, [r2, #0]
 80048d6:	b003      	add	sp, #12
 80048d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048dc:	f000 b978 	b.w	8004bd0 <__malloc_unlock>
 80048e0:	42a3      	cmp	r3, r4
 80048e2:	d908      	bls.n	80048f6 <_free_r+0x46>
 80048e4:	6825      	ldr	r5, [r4, #0]
 80048e6:	1961      	adds	r1, r4, r5
 80048e8:	428b      	cmp	r3, r1
 80048ea:	bf01      	itttt	eq
 80048ec:	6819      	ldreq	r1, [r3, #0]
 80048ee:	685b      	ldreq	r3, [r3, #4]
 80048f0:	1949      	addeq	r1, r1, r5
 80048f2:	6021      	streq	r1, [r4, #0]
 80048f4:	e7ed      	b.n	80048d2 <_free_r+0x22>
 80048f6:	461a      	mov	r2, r3
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	b10b      	cbz	r3, 8004900 <_free_r+0x50>
 80048fc:	42a3      	cmp	r3, r4
 80048fe:	d9fa      	bls.n	80048f6 <_free_r+0x46>
 8004900:	6811      	ldr	r1, [r2, #0]
 8004902:	1855      	adds	r5, r2, r1
 8004904:	42a5      	cmp	r5, r4
 8004906:	d10b      	bne.n	8004920 <_free_r+0x70>
 8004908:	6824      	ldr	r4, [r4, #0]
 800490a:	4421      	add	r1, r4
 800490c:	1854      	adds	r4, r2, r1
 800490e:	42a3      	cmp	r3, r4
 8004910:	6011      	str	r1, [r2, #0]
 8004912:	d1e0      	bne.n	80048d6 <_free_r+0x26>
 8004914:	681c      	ldr	r4, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	6053      	str	r3, [r2, #4]
 800491a:	4421      	add	r1, r4
 800491c:	6011      	str	r1, [r2, #0]
 800491e:	e7da      	b.n	80048d6 <_free_r+0x26>
 8004920:	d902      	bls.n	8004928 <_free_r+0x78>
 8004922:	230c      	movs	r3, #12
 8004924:	6003      	str	r3, [r0, #0]
 8004926:	e7d6      	b.n	80048d6 <_free_r+0x26>
 8004928:	6825      	ldr	r5, [r4, #0]
 800492a:	1961      	adds	r1, r4, r5
 800492c:	428b      	cmp	r3, r1
 800492e:	bf04      	itt	eq
 8004930:	6819      	ldreq	r1, [r3, #0]
 8004932:	685b      	ldreq	r3, [r3, #4]
 8004934:	6063      	str	r3, [r4, #4]
 8004936:	bf04      	itt	eq
 8004938:	1949      	addeq	r1, r1, r5
 800493a:	6021      	streq	r1, [r4, #0]
 800493c:	6054      	str	r4, [r2, #4]
 800493e:	e7ca      	b.n	80048d6 <_free_r+0x26>
 8004940:	b003      	add	sp, #12
 8004942:	bd30      	pop	{r4, r5, pc}
 8004944:	2000016c 	.word	0x2000016c

08004948 <sbrk_aligned>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4e0e      	ldr	r6, [pc, #56]	; (8004984 <sbrk_aligned+0x3c>)
 800494c:	460c      	mov	r4, r1
 800494e:	6831      	ldr	r1, [r6, #0]
 8004950:	4605      	mov	r5, r0
 8004952:	b911      	cbnz	r1, 800495a <sbrk_aligned+0x12>
 8004954:	f000 f88c 	bl	8004a70 <_sbrk_r>
 8004958:	6030      	str	r0, [r6, #0]
 800495a:	4621      	mov	r1, r4
 800495c:	4628      	mov	r0, r5
 800495e:	f000 f887 	bl	8004a70 <_sbrk_r>
 8004962:	1c43      	adds	r3, r0, #1
 8004964:	d00a      	beq.n	800497c <sbrk_aligned+0x34>
 8004966:	1cc4      	adds	r4, r0, #3
 8004968:	f024 0403 	bic.w	r4, r4, #3
 800496c:	42a0      	cmp	r0, r4
 800496e:	d007      	beq.n	8004980 <sbrk_aligned+0x38>
 8004970:	1a21      	subs	r1, r4, r0
 8004972:	4628      	mov	r0, r5
 8004974:	f000 f87c 	bl	8004a70 <_sbrk_r>
 8004978:	3001      	adds	r0, #1
 800497a:	d101      	bne.n	8004980 <sbrk_aligned+0x38>
 800497c:	f04f 34ff 	mov.w	r4, #4294967295
 8004980:	4620      	mov	r0, r4
 8004982:	bd70      	pop	{r4, r5, r6, pc}
 8004984:	20000170 	.word	0x20000170

08004988 <_malloc_r>:
 8004988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800498c:	1ccd      	adds	r5, r1, #3
 800498e:	f025 0503 	bic.w	r5, r5, #3
 8004992:	3508      	adds	r5, #8
 8004994:	2d0c      	cmp	r5, #12
 8004996:	bf38      	it	cc
 8004998:	250c      	movcc	r5, #12
 800499a:	2d00      	cmp	r5, #0
 800499c:	4607      	mov	r7, r0
 800499e:	db01      	blt.n	80049a4 <_malloc_r+0x1c>
 80049a0:	42a9      	cmp	r1, r5
 80049a2:	d905      	bls.n	80049b0 <_malloc_r+0x28>
 80049a4:	230c      	movs	r3, #12
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	2600      	movs	r6, #0
 80049aa:	4630      	mov	r0, r6
 80049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b0:	4e2e      	ldr	r6, [pc, #184]	; (8004a6c <_malloc_r+0xe4>)
 80049b2:	f000 f907 	bl	8004bc4 <__malloc_lock>
 80049b6:	6833      	ldr	r3, [r6, #0]
 80049b8:	461c      	mov	r4, r3
 80049ba:	bb34      	cbnz	r4, 8004a0a <_malloc_r+0x82>
 80049bc:	4629      	mov	r1, r5
 80049be:	4638      	mov	r0, r7
 80049c0:	f7ff ffc2 	bl	8004948 <sbrk_aligned>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	4604      	mov	r4, r0
 80049c8:	d14d      	bne.n	8004a66 <_malloc_r+0xde>
 80049ca:	6834      	ldr	r4, [r6, #0]
 80049cc:	4626      	mov	r6, r4
 80049ce:	2e00      	cmp	r6, #0
 80049d0:	d140      	bne.n	8004a54 <_malloc_r+0xcc>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	4631      	mov	r1, r6
 80049d6:	4638      	mov	r0, r7
 80049d8:	eb04 0803 	add.w	r8, r4, r3
 80049dc:	f000 f848 	bl	8004a70 <_sbrk_r>
 80049e0:	4580      	cmp	r8, r0
 80049e2:	d13a      	bne.n	8004a5a <_malloc_r+0xd2>
 80049e4:	6821      	ldr	r1, [r4, #0]
 80049e6:	3503      	adds	r5, #3
 80049e8:	1a6d      	subs	r5, r5, r1
 80049ea:	f025 0503 	bic.w	r5, r5, #3
 80049ee:	3508      	adds	r5, #8
 80049f0:	2d0c      	cmp	r5, #12
 80049f2:	bf38      	it	cc
 80049f4:	250c      	movcc	r5, #12
 80049f6:	4629      	mov	r1, r5
 80049f8:	4638      	mov	r0, r7
 80049fa:	f7ff ffa5 	bl	8004948 <sbrk_aligned>
 80049fe:	3001      	adds	r0, #1
 8004a00:	d02b      	beq.n	8004a5a <_malloc_r+0xd2>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	442b      	add	r3, r5
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	e00e      	b.n	8004a28 <_malloc_r+0xa0>
 8004a0a:	6822      	ldr	r2, [r4, #0]
 8004a0c:	1b52      	subs	r2, r2, r5
 8004a0e:	d41e      	bmi.n	8004a4e <_malloc_r+0xc6>
 8004a10:	2a0b      	cmp	r2, #11
 8004a12:	d916      	bls.n	8004a42 <_malloc_r+0xba>
 8004a14:	1961      	adds	r1, r4, r5
 8004a16:	42a3      	cmp	r3, r4
 8004a18:	6025      	str	r5, [r4, #0]
 8004a1a:	bf18      	it	ne
 8004a1c:	6059      	strne	r1, [r3, #4]
 8004a1e:	6863      	ldr	r3, [r4, #4]
 8004a20:	bf08      	it	eq
 8004a22:	6031      	streq	r1, [r6, #0]
 8004a24:	5162      	str	r2, [r4, r5]
 8004a26:	604b      	str	r3, [r1, #4]
 8004a28:	4638      	mov	r0, r7
 8004a2a:	f104 060b 	add.w	r6, r4, #11
 8004a2e:	f000 f8cf 	bl	8004bd0 <__malloc_unlock>
 8004a32:	f026 0607 	bic.w	r6, r6, #7
 8004a36:	1d23      	adds	r3, r4, #4
 8004a38:	1af2      	subs	r2, r6, r3
 8004a3a:	d0b6      	beq.n	80049aa <_malloc_r+0x22>
 8004a3c:	1b9b      	subs	r3, r3, r6
 8004a3e:	50a3      	str	r3, [r4, r2]
 8004a40:	e7b3      	b.n	80049aa <_malloc_r+0x22>
 8004a42:	6862      	ldr	r2, [r4, #4]
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	bf0c      	ite	eq
 8004a48:	6032      	streq	r2, [r6, #0]
 8004a4a:	605a      	strne	r2, [r3, #4]
 8004a4c:	e7ec      	b.n	8004a28 <_malloc_r+0xa0>
 8004a4e:	4623      	mov	r3, r4
 8004a50:	6864      	ldr	r4, [r4, #4]
 8004a52:	e7b2      	b.n	80049ba <_malloc_r+0x32>
 8004a54:	4634      	mov	r4, r6
 8004a56:	6876      	ldr	r6, [r6, #4]
 8004a58:	e7b9      	b.n	80049ce <_malloc_r+0x46>
 8004a5a:	230c      	movs	r3, #12
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	4638      	mov	r0, r7
 8004a60:	f000 f8b6 	bl	8004bd0 <__malloc_unlock>
 8004a64:	e7a1      	b.n	80049aa <_malloc_r+0x22>
 8004a66:	6025      	str	r5, [r4, #0]
 8004a68:	e7de      	b.n	8004a28 <_malloc_r+0xa0>
 8004a6a:	bf00      	nop
 8004a6c:	2000016c 	.word	0x2000016c

08004a70 <_sbrk_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4d06      	ldr	r5, [pc, #24]	; (8004a8c <_sbrk_r+0x1c>)
 8004a74:	2300      	movs	r3, #0
 8004a76:	4604      	mov	r4, r0
 8004a78:	4608      	mov	r0, r1
 8004a7a:	602b      	str	r3, [r5, #0]
 8004a7c:	f7fc f828 	bl	8000ad0 <_sbrk>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_sbrk_r+0x1a>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_sbrk_r+0x1a>
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	20000174 	.word	0x20000174

08004a90 <__sread>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	460c      	mov	r4, r1
 8004a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a98:	f000 f8a0 	bl	8004bdc <_read_r>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	bfab      	itete	ge
 8004aa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8004aa4:	181b      	addge	r3, r3, r0
 8004aa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004aaa:	bfac      	ite	ge
 8004aac:	6563      	strge	r3, [r4, #84]	; 0x54
 8004aae:	81a3      	strhlt	r3, [r4, #12]
 8004ab0:	bd10      	pop	{r4, pc}

08004ab2 <__swrite>:
 8004ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab6:	461f      	mov	r7, r3
 8004ab8:	898b      	ldrh	r3, [r1, #12]
 8004aba:	05db      	lsls	r3, r3, #23
 8004abc:	4605      	mov	r5, r0
 8004abe:	460c      	mov	r4, r1
 8004ac0:	4616      	mov	r6, r2
 8004ac2:	d505      	bpl.n	8004ad0 <__swrite+0x1e>
 8004ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac8:	2302      	movs	r3, #2
 8004aca:	2200      	movs	r2, #0
 8004acc:	f000 f868 	bl	8004ba0 <_lseek_r>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ada:	81a3      	strh	r3, [r4, #12]
 8004adc:	4632      	mov	r2, r6
 8004ade:	463b      	mov	r3, r7
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae6:	f000 b817 	b.w	8004b18 <_write_r>

08004aea <__sseek>:
 8004aea:	b510      	push	{r4, lr}
 8004aec:	460c      	mov	r4, r1
 8004aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af2:	f000 f855 	bl	8004ba0 <_lseek_r>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	bf15      	itete	ne
 8004afc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004afe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b06:	81a3      	strheq	r3, [r4, #12]
 8004b08:	bf18      	it	ne
 8004b0a:	81a3      	strhne	r3, [r4, #12]
 8004b0c:	bd10      	pop	{r4, pc}

08004b0e <__sclose>:
 8004b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b12:	f000 b813 	b.w	8004b3c <_close_r>
	...

08004b18 <_write_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4d07      	ldr	r5, [pc, #28]	; (8004b38 <_write_r+0x20>)
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	4608      	mov	r0, r1
 8004b20:	4611      	mov	r1, r2
 8004b22:	2200      	movs	r2, #0
 8004b24:	602a      	str	r2, [r5, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	f7fb ff81 	bl	8000a2e <_write>
 8004b2c:	1c43      	adds	r3, r0, #1
 8004b2e:	d102      	bne.n	8004b36 <_write_r+0x1e>
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	b103      	cbz	r3, 8004b36 <_write_r+0x1e>
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	bd38      	pop	{r3, r4, r5, pc}
 8004b38:	20000174 	.word	0x20000174

08004b3c <_close_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4d06      	ldr	r5, [pc, #24]	; (8004b58 <_close_r+0x1c>)
 8004b40:	2300      	movs	r3, #0
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	602b      	str	r3, [r5, #0]
 8004b48:	f7fb ff8d 	bl	8000a66 <_close>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_close_r+0x1a>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_close_r+0x1a>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	20000174 	.word	0x20000174

08004b5c <_fstat_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4d07      	ldr	r5, [pc, #28]	; (8004b7c <_fstat_r+0x20>)
 8004b60:	2300      	movs	r3, #0
 8004b62:	4604      	mov	r4, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	602b      	str	r3, [r5, #0]
 8004b6a:	f7fb ff88 	bl	8000a7e <_fstat>
 8004b6e:	1c43      	adds	r3, r0, #1
 8004b70:	d102      	bne.n	8004b78 <_fstat_r+0x1c>
 8004b72:	682b      	ldr	r3, [r5, #0]
 8004b74:	b103      	cbz	r3, 8004b78 <_fstat_r+0x1c>
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	bd38      	pop	{r3, r4, r5, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000174 	.word	0x20000174

08004b80 <_isatty_r>:
 8004b80:	b538      	push	{r3, r4, r5, lr}
 8004b82:	4d06      	ldr	r5, [pc, #24]	; (8004b9c <_isatty_r+0x1c>)
 8004b84:	2300      	movs	r3, #0
 8004b86:	4604      	mov	r4, r0
 8004b88:	4608      	mov	r0, r1
 8004b8a:	602b      	str	r3, [r5, #0]
 8004b8c:	f7fb ff87 	bl	8000a9e <_isatty>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_isatty_r+0x1a>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_isatty_r+0x1a>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	20000174 	.word	0x20000174

08004ba0 <_lseek_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4d07      	ldr	r5, [pc, #28]	; (8004bc0 <_lseek_r+0x20>)
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	4608      	mov	r0, r1
 8004ba8:	4611      	mov	r1, r2
 8004baa:	2200      	movs	r2, #0
 8004bac:	602a      	str	r2, [r5, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f7fb ff80 	bl	8000ab4 <_lseek>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d102      	bne.n	8004bbe <_lseek_r+0x1e>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	b103      	cbz	r3, 8004bbe <_lseek_r+0x1e>
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	bd38      	pop	{r3, r4, r5, pc}
 8004bc0:	20000174 	.word	0x20000174

08004bc4 <__malloc_lock>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	; (8004bcc <__malloc_lock+0x8>)
 8004bc6:	f7ff be0b 	b.w	80047e0 <__retarget_lock_acquire_recursive>
 8004bca:	bf00      	nop
 8004bcc:	20000168 	.word	0x20000168

08004bd0 <__malloc_unlock>:
 8004bd0:	4801      	ldr	r0, [pc, #4]	; (8004bd8 <__malloc_unlock+0x8>)
 8004bd2:	f7ff be06 	b.w	80047e2 <__retarget_lock_release_recursive>
 8004bd6:	bf00      	nop
 8004bd8:	20000168 	.word	0x20000168

08004bdc <_read_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	4d07      	ldr	r5, [pc, #28]	; (8004bfc <_read_r+0x20>)
 8004be0:	4604      	mov	r4, r0
 8004be2:	4608      	mov	r0, r1
 8004be4:	4611      	mov	r1, r2
 8004be6:	2200      	movs	r2, #0
 8004be8:	602a      	str	r2, [r5, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f7fb ff02 	bl	80009f4 <_read>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d102      	bne.n	8004bfa <_read_r+0x1e>
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	b103      	cbz	r3, 8004bfa <_read_r+0x1e>
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	20000174 	.word	0x20000174

08004c00 <_init>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	bf00      	nop
 8004c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c06:	bc08      	pop	{r3}
 8004c08:	469e      	mov	lr, r3
 8004c0a:	4770      	bx	lr

08004c0c <_fini>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	bf00      	nop
 8004c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c12:	bc08      	pop	{r3}
 8004c14:	469e      	mov	lr, r3
 8004c16:	4770      	bx	lr
